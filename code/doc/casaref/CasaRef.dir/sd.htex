
\newpage
\ahtool{sd}{Single-dish data analysis package}
Requires:
Synopsis

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  The sd tool provides data reduction functions for single-dish 
  (auto-correlation) data. It is actually a standalone 
  software that is called ASAP (ATNF Spectral Analysis Package). 
  For more information about ASAP, 
  visit \htmladdnormallink{here}{http://svn.atnf.csiro.au/trac/asap}.

  The sd tool is a top level object and it contains various 
  sub tools as well as a number of functions.

  \medskip\noindent\textbf{Important note}

    To access sd tool from \casa\ , the user must execute asap_init(). 
    This command imports ASAP package as sd tool and make single-dish 
    tasks available.

  \medskip\noindent\textbf{Data format}

    There are various types of data format for single-dish data.
    Currently, sd tool supports the following data formats for 
    reading and writing.

\begin{itemize}
\item reading: Scantable, Measurement Set, SDFITS (GBT, ATNF), NRO
\item writing: Scantable, Measurement Set, SDFITS (ATNF)
\end{itemize}

    An internal data format for sd tool is Scantable.
    The Scantable is defined as \casa\ table and is specially 
    designed for single-dish data. The data is converted to Scantable  
    during the processing whatever its oritinal data format is.
    The result of the processing can be stored in other data format 
    than Scantable. 
    The Scantable is implemented as \ahlink{sd.scantable}{sd:sd.scantable}
    object in sd tool. 
    See \ahlink{sd.scantable}{sd:sd.scantable} for details. 

  \medskip\noindent\textbf{Selecting data}

    The Scantable can contain data with different frequency setting, 
    different polarization component, and so on. In case when you want 
    to select data by some conditions, \ahlink{sd.selector}{sd:sd.selector} 
    is available for this. The \ahlink{sd.selector}{sd:sd.selector} provides 
    various functions to select data as well as it also provides 
    an interface to select data by  
    \htmladdnormallink{TaQL}{http://aips2.nrao.edu/docs/notes/199/199.html}.
    See \ahlink{sd.selector}{sd:sd.selector} for details.

  \medskip\noindent\textbf{Fitting}

    The \ahlink{sd.fitter}{sd:sd.fitter} is an object to perform fitting. 
    Both baseline and line fitting for spectral data can be done by this 
    object if appropriate fitting function and masked region are set.
    Currently, Gaussian and Lorentzian are supported for line fitting, 
    while polynomials with arbitrary order are available for baseline 
    fitting. Masking should be applied in the form of Bool array.
    See \ahlink{sd.fitter}{sd:sd.fitter} for details.  

  \medskip\noindent\textbf{Line finding}

    The sd tool provides automatic line finding functionality that is 
    called \ahlink{sd.linefinder}{sd:sd.linefinder}. 
    \ahlink{sd.linefinder}{sd:sd.linefinder} has a few control parameter 
    for line finding. The user can customize behavior of line finding 
    process by changing these parameters.
    See \ahlink{sd.linefinder}{sd:sd.linefinder} for details.

  \medskip\noindent\textbf{Line catalog}

    The \ahlink{sd.linecatalog}{sd:sd.linecatalog} object is a wrapper for 
    line catalog. The input data should be provided from the user.
    Supported format is ASCII table or specific format for 
    \ahlink{sd.linecatalog}{sd:sd.linecatalog}.
    \casa\ package contains a default line catalog that is a part of 
    JPL line catalog. 
    Benefit of this object is that it provides an interface to the 
    catalog such as selecting lines by frequency and/or line intensity.
    It also enables an interaction between 
    spectral data on the \ahlink{sd.plotter}{sd:sd.plotter} such as 
    overlaying line catalog on the plotted spectra.
    See \ahlink{sd.linecatalog}{sd:sd.linecatalog} for details.

  \medskip\noindent\textbf{Plotter}

    The \ahlink{sd.plotter}{sd:sd.plotter} is a plotter object that is 
    exclusively designed for sd tool. That provides plotting functionalities 
    for spectral data, time variation of azimuth and elevation, and 
    pointing information. For plotting spectral data, it supports 
    multi-panel and multi-page plot.
    See \ahlink{sd.plotter}{sd:sd.plotter} for details.   

  \medskip\noindent\textbf{Coordinate system}

    The \ahlink{sd.coordinate}{sd:sd.coordinate} is a representation of 
    spectral coordinate of the data (frequency axis). It provides functions 
    for conversion between pixel (channel), frequency, and velocity.
    See \ahlink{sd.coordinate}{sd:sd.coordinate} for details. 
		
  \medskip\noindent\textbf{Opacity model}

    In the sd tool, MIRIAD like atmospheric opacity model is implemented 
    as \ahlink{sd.opacity\_model}{sd:sd.opacity_model}. It calculates opacities from 
    given atmospheric conditions (temperature, pressure, and humidity) 
    and elevation.
    See \ahlink{sd.opacity\_model}{sd:sd.opacity_model} for details.
		

Methods
\begin{longtable}{ll}

	\ahlink{almacal}{sd:sd.almacal} &Calibration function specific for ALMA data \\

	\ahlink{apexcal}{sd:sd.apexcal} &Calibration function specific for APEX data \\

	\ahlink{average\_time}{sd:sd.average_time} &Averaging data in time \\

	\ahlink{calfs}{sd:sd.calfs} &Calibration function for frequency switched data \\

	\ahlink{calibrate}{sd:sd.calibrate} &High level function for calibration that calls appropriate calibration function depending on the data \\

	\ahlink{calnod}{sd:sd.calnod} &Calibration function for nodding data \\

	\ahlink{calps}{sd:sd.calps} &Calibration function for position switched data \\

	\ahlink{commands}{sd:sd.commands} &Show a list of commands and their short descriptions \\

	\ahlink{dosigref}{sd:sd.dosigref} &Equivalent function with dosigref in \htmladdnormallink{GBTIDL}{http://gbtidl.nrao.edu/} \\

	\ahlink{dototalpower}{sd:sd.dototalpower} &Equivalent function with dototalpower in \htmladdnormallink{GBTIDL}{http://gbtidl.nrao.edu/} \\

	\ahlink{fitter}{sd:sd.fitter} &Create a fitter object \\

	\ahlink{get\_revision}{sd:sd.get_revision} &Get revision of the source code for the tool \\

	\ahlink{is\_asap\_cli}{sd:sd.is_asap_cli} &Check if the tool is loaded as part of \casa\ or is launched as standalone software \\

	\ahlink{is\_casapy}{sd:sd.is_casapy} & Check if the tool is loaded as part of \casa\ or is launched as standalone software \\

	\ahlink{linecatalog}{sd:sd.linecatalog} &Create a linecatalog object \\

	\ahlink{linefinder}{sd:sd.linefinder} &Create a linefinder object \\

	\ahlink{list\_files}{sd:sd.list_files} &Return a list of files readable by sd tool \\

	\ahlink{list\_rcparameters}{sd:sd.list_rcparameters} &Print a list of rc parameters \\

	\ahlink{list\_scans}{sd:sd.list_scans} &Return a list of scantables created by the user \\

	\ahlink{mask\_and}{sd:sd.mask_and} &Logical operation function on array\\

	\ahlink{mask\_or}{sd:sd.mask_or} &Logical operation function on array \\

	\ahlink{mask\_not}{sd:sd.mask_not} &Logical operation function on array\\

	\ahlink{merge}{sd:sd.merge} &Merge a list of scantables into one \\

	\ahlink{opacity\_model}{sd:sd.opacity_model} &Create a opacity\_model object \\

	\ahlink{quotient}{sd:sd.quotient} &Take a quotient of a signal and reference scan \\

        \ahlink{rc}{sd:sd.rc} &Set the current rc parameters \\

	\ahlink{scantable}{sd:sd.scantable} &Create scantable object \\

	\ahlink{selector}{sd:sd.selector} &Create selector object \\

	\ahlink{skydip}{sd:sd.skydip} &Determine the opacity from a set of 'skydip' observations \\

	\ahlink{splitant}{sd:sd.splitant} &Split Measurement Set data by antenna and save them as scantable \\

	\ahlink{unique}{sd:sd.unique} &Return the unique values in a list \\

	\ahlink{welcome}{sd:sd.welcome} &Return a welcome message \\

\end{longtable}




%% sd.almacal
\newpage
\ahfunction{sd.almacal}{Calibration function specific for ALMA data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
  
  This method is properly defined for calibration of ALMA data.
  Input data must be a scantable object. The calibration scheme is, 

  \begin{displaymath}
  T_{\rm a}^* = T_{\rm sys} { {ON - OFF} \over OFF },
  \end{displaymath}

  where $T_{\rm a}^*$ is an antenna temperature, $T_{\rm sys}$ is a 
  system temperature, $ON$ and $OFF$ are raw (uncalibrated) spectral 
  data that correspond to on-source and off-source position, 
  respectively. The $OFF$ scan is linearly interpolated in time if it exists 
  in the vicinity of target $ON$ scan.
  The calmode argument specifies calibration mode. Supported calibration 
  modes are 'ps' (position switch) and 'fs' (frequency switch). 
  The 'ps' includes calibration for nutator switching 
  as well as classical position switching.
  The 'ps' mode also supports calibration of OTF position raster scanned 
  data that consists of on-source scans with simple scan pattern and 
  explicit off-source scans. 

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
scantab&& \multicolumn{2}{p{3.36in}|}{input data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
scannos&& \multicolumn{2}{p{3.36in}|}{a list of scan numbers to be calibrated}\\
& &allowed: & (list of) integer, string \\
& &Default: & [] (all data)
\\
calmode&& \multicolumn{2}{p{3.36in}|}{Calibration mode}\\
& &allowed: & string ('ps', 'fs', 'none')\\
& &Default: & 'none'
\\
verify&& \multicolumn{2}{p{3.36in}|}{Verify calibration if True}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

    
    asap_init()
    s=sd.scantable('alma-scans.asap',average=False,getpt=True)
    scal=sd.almacal(s,calmode='ps')
    
  
\end{verbatim}

%% sd.apexcal
\newpage
\ahfunction{sd.apexcal}{Calibration function specific for APEX data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  This method is properly defined for calibration of APEX data.
  Input data must be a scantable object. The calibration scheme is 
  essentially same as ALMA data, 

  \begin{displaymath}
  T_{\rm a}^* = T_{\rm sys} { {ON - OFF} \over OFF },
  \end{displaymath}

  where $T_{\rm a}^*$ is an antenna temperature, $T_{\rm sys}$ is a 
  system temperature, $ON$ and $OFF$ are raw (uncalibrated) spectral 
  data that correspond to on-source and off-source position, 
  respectively. Only difference with ALMA calibration is that 
  $T_{\rm sys}$ doesn't provided. Instead, it is computed from 
  a calibration temperature and two calibration scans: a blank sky 
  and a load with known temperature.
  The $OFF$ scan is linearly interpolated in time if it exists 
  in the vicinity of target $ON$ scan.
  The calmode argument specifies calibration mode. Supported calibration 
  modes are 'ps' (position switch) and 'fs' (frequency switch). 
  The 'ps' includes calibration for nutator switching 
  as well as classical position switching.
  
\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
scantab&& \multicolumn{2}{p{3.36in}|}{input data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
scannos&& \multicolumn{2}{p{3.36in}|}{a list of scan numbers to be calibrated}\\
& &allowed: & (list of) integer, string \\
& &Default: & [] (all data)
\\
calmode&& \multicolumn{2}{p{3.36in}|}{Calibration mode}\\
& &allowed: & string ('ps', 'fs', 'none')\\
& &Default: & 'none'
\\
verify&& \multicolumn{2}{p{3.36in}|}{Verify calibration if True}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

    
    asap_init()
    s=sd.scantable('alma-scans.asap',average=False,getpt=True)
    scal=sd.apexcal(s,calmode='ps')
    
  
\end{verbatim}


%% sd.average_time
\newpage
\ahsdfunction{sd.average\_time}{sd.average_time}{Averaging data in Time}

\flushleft\vspace{.20in}\textbf {Description}\\
  \hfill \\
  The function computes a weighted time average of a scantable or a 
  list of scantables. The averaging is done in channel only. 
  Supported weighting schemes are as follows:

  \begin{itemize}
  \item none --- no weighting
  \item var --- 1/var(spectrum) weighted
  \item tsys --- 1/Tsys**2 weighted
  \item tint --- integration time weighted
  \item tintsys --- Tint/Tsys**2 weighted
  \item median] --- median averaging
  \end{itemize}

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
  && \multicolumn{2}{p{3.36in}|}{Input data as a scantable}\\
& &allowed: & scantable or a list of scantables\\
& &Default: & 
\\
mask && \multicolumn{2}{p{3.36in}|}{An optional mask (only used for 'var' and 'tsys' weighting)}\\
& &allowed: & bool list\\
& &Default: & none
\\
scanav && \multicolumn{2}{p{3.36in}|}{True averages each scan separately, False averages all scans together}\\
& &allowed: & bool\\
& &Default: & False
\\
weight && \multicolumn{2}{p{3.36in}|}{Weighting scheme (see description)}\\
& &allowed: & string\\
& &Default: & 'tint'
\\
align && \multicolumn{2}{p{3.36in}|}{Align the spectra in velocity before averaging. It takes the time of the first spectrum in the first scantable as reference time.}\\
& &allowed: & bool\\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains time averaged scans
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

    
        # return a time averaged scan from scana and scanb
        # without using a mask
        scanav = average_time(scana,scanb)
        # or equivalent
        # scanav = average_time([scana, scanb])
        # return the (time) averaged scan, i.e. the average of
        # all correlator cycles
        scanav = average_time(scan, scanav=True)



\end{verbatim}

%% sd.calfs
\newpage
\ahfunction{sd.calfs}{Calibration function for frequency switched data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    Calibrate GBT frequency switched data.
    Adopted from GBTIDL getfs.
    Currently calfs identify the scans as frequency switched data if source
    type enum is fson and fsoff. The data must contains 'CAL' signal
    on/off in each integration. To identify 'CAL' on state, the source type 
    enum of foncal and foffcal need to be present in the source name field.
    (GBT MS data reading via scantable automatically append these
    id names to the source names)

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
scantab&& \multicolumn{2}{p{3.36in}|}{Input data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
scannos&& \multicolumn{2}{p{3.36in}|}{A list of scan numbers to be calibrated}\\
& &allowed: & (list of) integer \\
& &Default: & [] (all data)
\\
smooth&& \multicolumn{2}{p{3.36in}|}{Optional box smoothing order for the reference}\\
& &allowed: & int\\
& &Default: & 1 (no smoothing)
\\
tsysval&& \multicolumn{2}{p{3.36in}|}{Optional user specified Tsys}\\
& &allowed: & float \\
& &Default: & 0.0 (use Tsys in the data)
\\
tauval&& \multicolumn{2}{p{3.36in}|}{Optional user specified optical depth}\\
& &allowed: & float \\
& &Default: & 0.0
\\
verify&& \multicolumn{2}{p{3.36in}|}{Verify calibration if True}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.calibrate
\newpage
\ahfunction{sd.calibrate}{High level function for calibration that calls appropriate calibration function depending on the data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   This method is a high level function for calibration. It calls appropriate 
   calibration function depending on the origin of the data. It checks an 
   calmode argument first, and then looks antenna name in the data. 
   Calibration functions that can be called from the method are:

   \begin{itemize}
   \item \ahlink{calnod}{sd:sd.calnod} if calmode is 'nod'
   \item \ahlink{auto\_quotient}{sd:sd.scantable.auto_quotient} if calmode is 'quotient'
   \item \ahlink{calps}{sd:sd.calps} if calmode is 'ps' and antenna name is 'GBT' 
   \item \ahlink{calfs}{sd:sd.calfs} if calmode is 'fs' and antenna name is 'GBT'
   \item \ahlink{apexcal}{sd:sd.apexcal} if calmode is 'ps' or 'fs' and antenna name contains 'APEX'
   \item \ahlink{almacal}{sd:sd.almacal} if calmode is 'ps', 'fs', or 'otf' and antenna name contains 'ALMA' or 'OSF'
   \end{itemize}

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
scantab&& \multicolumn{2}{p{3.36in}|}{input data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
scannos&& \multicolumn{2}{p{3.36in}|}{a list of scan numbers to be calibrated}\\
& &allowed: & (list of) integer, string \\
& &Default: & [] (all data)
\\
calmode&& \multicolumn{2}{p{3.36in}|}{Calibration mode}\\
& &allowed: & string ('ps', 'fs', 'none')\\
& &Default: & 'none'
\\
verify&& \multicolumn{2}{p{3.36in}|}{Verify calibration if True}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

    
    asap_init()
    s=sd.scantable('alma-scans.asap',average=False,getpt=True)
    scal=sd.apexcal(s,calmode='ps')
    
  
\end{verbatim}


%% sd.calnod
\newpage
\ahfunction{sd.calnod}{Calibration function for nodding data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    This method performs full (but a pair of scans at time) processing of 
    GBT Nod data calibration.
    Adopted from  GBTIDL's getnod

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
scantab&& \multicolumn{2}{p{3.36in}|}{Input data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
scannos&& \multicolumn{2}{p{3.36in}|}{A pair of scan numbers, or the first scan number of the pair}\\
& &allowed: & (list of) integer \\
& &Default: & [] (all data)
\\
smooth&& \multicolumn{2}{p{3.36in}|}{Box car smoothing order}\\
& &allowed: & int\\
& &Default: & 1 (no smoothing)
\\
tsysval&& \multicolumn{2}{p{3.36in}|}{Optional user specified Tsys}\\
& &allowed: & float \\
& &Default: & 0.0 (use Tsys in the data)
\\
tauval&& \multicolumn{2}{p{3.36in}|}{Optional user specified optical depth (not implemented yet)}\\
& &allowed: & float \\
& &Default: & 0.0
\\
tcalval&& \multicolumn{2}{p{3.36in}|}{Optional user specified Tcal}\\
& &allowed: & float \\
& &Default: & 0.0
\\
verify&& \multicolumn{2}{p{3.36in}|}{Verify calibration if True}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.calps
\newpage
\ahfunction{sd.calps}{Calibration function for position switched data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    The method calibrates GBT position switched data
    Adopted from GBTIDL getps
    Currently calps identify the scans as position switched data if source
    type enum is pson or psoff. The data must contains 'CAL' signal
    on/off in each integration. To identify 'CAL' on state, the source type 
    enum of poncal and poffcal need to be present in the source name field.
    (GBT MS data reading process to scantable automatically append these
    id names to the source names)


\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
scantab&& \multicolumn{2}{p{3.36in}|}{Input data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
scannos&& \multicolumn{2}{p{3.36in}|}{A list of scan numbers to be calibrated}\\
& &allowed: & (list of) integer \\
& &Default: & [] (all data)
\\
smooth&& \multicolumn{2}{p{3.36in}|}{Optional box smoothing order for the reference}\\
& &allowed: & int\\
& &Default: & 1 (no smoothing)
\\
tsysval&& \multicolumn{2}{p{3.36in}|}{Optional user specified Tsys}\\
& &allowed: & float \\
& &Default: & 0.0 (use Tsys in the data)
\\
tauval&& \multicolumn{2}{p{3.36in}|}{Optional user specified optical depth}\\
& &allowed: & float \\
& &Default: & 0.0
\\
tcalval&& \multicolumn{2}{p{3.36in}|}{Optional user specified Tcal}\\
& &allowed: & float \\
& &Default: & 0.0 (use Tcal in the data)
\\
verify&& \multicolumn{2}{p{3.36in}|}{Verify calibration if True}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated spectra

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.commands
\newpage
\ahfunction{sd.commands}{Show a list of commands and their short descriptions}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   The method prints a list of commands and their short descriptions.
   The output is sorted by their intents and/or subtools that the commands 
   associate. 

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.dosigref
\newpage
\ahfunction{sd.dosigref}{Equivalent function with dosigref in GBTIDL}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    The method calculates a quotient (sig-ref/ref * Tsys).
    Adopted from GBTIDL dosigref.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
sig&& \multicolumn{2}{p{3.36in}|}{On-source data as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
ref&& \multicolumn{2}{p{3.36in}|}{Reference data as a scantable}\\
& &allowed: & scantable \\
& &Default: & 
\\
smooth&& \multicolumn{2}{p{3.36in}|}{Width of box car smoothing for reference}\\
& &allowed: & int\\
& &Default: & 1 (no smoothing)
\\
tsysval&& \multicolumn{2}{p{3.36in}|}{User specified Tsys}\\
& &allowed: & float \\
& &Default: & 0.0 (use Tsys in the data)
\\
tauval&& \multicolumn{2}{p{3.36in}|}{User specified optical depth (required if tsysval is set)}\\
& &allowed: & float \\
& &Default: & 0.0
\\

\hline
\end{tabular}


\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains processed spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.dototalpower
\newpage
\ahfunction{sd.dototalpower}{Equivalent function with dototalpower in GBTIDL}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    The method performs calibration for CAL on,off signals.
    Adopted from GBTIDL dototalpower.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
calon&& \multicolumn{2}{p{3.36in}|}{The 'cal on' subintegration as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
caloff&& \multicolumn{2}{p{3.36in}|}{The 'cal off' subintegration as a scantable}\\
& &allowed: & scantable \\
& &Default: & 
\\
tcalval&& \multicolumn{2}{p{3.36in}|}{User supplied Tsys}\\
& &allowed: & float \\
& &Default: & 0.0 (use Tcal in the data)
\\

\hline
\end{tabular}


\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains processed spectra
\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.get_revision
\newpage
\ahsdfunction{sd.get\_revision}{sd.get_revision}{Get revision of the source code for the tool}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   Get the revision of the software.
   Actually it returns a revision number of the source code that is managed 
   by subversion.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\

\flushleft\vspace{.20in}\textbf {Returns}\newline
revision number string

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.is_asap_cli
\newpage
\ahsdfunction{sd.is\_asap\_cli}{sd.is_asap_cli}{Check if the tool is loaded as part of \casa\ or is launched as standalone software}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   The method checks if sd tool (ASAP) is running standalone.
   This always returns False if you use \casa\ .

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\

\flushleft\vspace{.20in}\textbf {Returns}\newline
bool (False)

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.is_casapy
\newpage
\ahsdfunction{sd.is\_casapy}{sd.is_casapy}{Check if the tool is loaded as part of \casa\ or is launched as standalone software}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   The method checks if sd tool is running on \casa.
   This always returns True if you use \casa.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline
bool (True)

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.list_files
\newpage
\ahsdfunction{sd.list\_files}{sd.list_files}{Return list of files readable by sd tool}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   Return a list files readable by asap, such as MS, rpf, sdfits, mbf, asap.
   The method looks a directory that is indicated by path argument, and 
   searches files with extension specified by suffix. Allowed extensions 
   are:

   \begin{itemize}
   \item rpf --- RPFITS (default)
   \item rpf.1 --- RPFITS
   \item rpf.2 --- RPFITS
   \item sdf --- SDFITS
   \item sdfits -- SDFITS
   \item mbf --- MBFITS
   \item asap --- Scantable
   \item ms --- Measurement Set
   \end{itemize}

   Note that the method just checks the extension of the file name. 
   Thus, the returned list doesn't contains files that don't have 
   the above extensions even if they are readable.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
path&& \multicolumn{2}{p{3.36in}|}{The directory to list}\\
& &allowed: & string\\
& &Default: & './' (current directory)
\\
suffix&& \multicolumn{2}{p{3.36in}|}{The file extension}\\
& &allowed: & string \\
& &Default: & 'rpf'
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
string list
\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

        asap_init()
        files = sd.list_files("data/","sdfits")
        print files
        ['data/2001-09-01_0332_P363.sdfits',
        'data/2003-04-04_131152_t0002.sdfits',
        'data/Sgr_86p262_best_SPC.sdfits']

\end{verbatim}


%% sd.list_rcparameters
\newpage
\ahsdfunction{sd.list\_rcparameters}{sd.list_rcparameters}{Print a list of rc parameters}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   Print a list of rc parameters and its default values that determine 
   basic behavior of the tool.
   The user can be accessed rc parameters directory since the rc parameters 
   are available as a Python dictionary sd.rcParams. There is also a method 
   to set rc parameters called \ahlink{rc}{sd:sd.rc}.
   Contents of the rc paramters are described below.

   \begin{itemize}
   \item verbose \\ It will disable exceptions and just print the messages (only valid in standalone mode)
   \item useplotter \\ Preload a default plotter
   \item insitu \\ Apply operations on the input scantable or retuern new one
   \item plotter.gui \\ Do we want a GUI or plot to a file
   \item plotter.stacking \\ Default mode for color stacking
   \item plotter.panelling \\ Default mode for panelling
   \item plotter.ganged \\ Push panels together, to share axis labels
   \item plotter.decimate \\ Decimate the number of points plotted by a factor of nchan/1024
   \item plotter.colours \\ Default color
   \item plotter.linestyles \\ Default linestyles
   \item plotter.histogram \\ Enable/disable histogram plotting
   \item plotter.papertype \\ Postscript paper type
   \item plotter.axesformatting \\ The formatting style of the x-axis
   \item scantable.storage \\ Default storage of scantable ('memory'/'disk')
   \item scantable.history \\ Write history of each call to scantable
   \item scantable.save \\ Default output format when saving
   \item scantable.autoaverage \\ Auto averaging on read
   \item scantable.freqframe \\ Default frequency frame to set when function \ahlink{set\_freqframe}{sd:sd.scantable.set_freqframe} is called
   \item scantable.verbosesummary \\ Control the level of information printed by \ahlink{summary}{sd:sd.scantable.summary}
   \item scantable.reference \\ Control the identification of reference (off) scans (has to be regular expression)
   \item scantable.parallactify \\ Indicate whether the data was parallactified (total phase offset is 0.0)
   \end{itemize}


\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline
string describing rc parameters

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.list_scans
\newpage
\ahsdfunction{sd.list\_scans}{sd.list_scans}{Return a list of scantables created by the user}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   The method prints and returns a list of scantables that the user created.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.mask_and
\newpage
\ahsdfunction{sd.mask\_and}{sd.mask_and}{Logical operation function on array}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   This is an utility function that performs logical 'and' operation 
   on specified two boolean arrays in element-by-element manner.
   Input arrays should have same length.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
a&& \multicolumn{2}{p{3.36in}|}{Input boolean array}\\
& &allowed: & bool array\\
& &Default: & 
\\
b&& \multicolumn{2}{p{3.36in}|}{Input boolean array}\\
& &allowed: & bool array \\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
bool array

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

%% sd.mask_or
\newpage
\ahsdfunction{sd.mask\_or}{sd.mask_or}{Logical operation function on array}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   This is an utility function that performs logical 'or' operation 
   on specified two boolean arrays in element-by-element manner.
   Input arrays should have same length.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
a&& \multicolumn{2}{p{3.36in}|}{Input boolean array}\\
& &allowed: & bool array\\
& &Default: & 
\\
b&& \multicolumn{2}{p{3.36in}|}{Input boolean array}\\
& &allowed: & bool array \\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
bool array

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.mask_not
\newpage
\ahsdfunction{sd.mask\_not}{sd.mask_not}{Logical operation function on array}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   This is an utility function that performs logical 'not' operation 
   on the input boolean array in element-by-element manner.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
a&& \multicolumn{2}{p{3.36in}|}{Input boolean array}\\
& &allowed: & bool array\\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
bool array

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.merge
\newpage
\ahfunction{sd.merge}{Merge a list of scantables into one}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   Merge a list of scanatables, or comma-sperated scantables into one scnatble.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
 && \multicolumn{2}{p{3.36in}|}{Input scantables}\\
& &allowed: & list of scantables or comma-separated scantables\\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
merged (sinble) scantable

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

        asap_init()
        scan1 = sd.scantable('scan1.asap')
        scan2 = sd.scantable('scan2.asap')
        myscans = [scan1, scan2]
        allscans = sd.merge(myscans)
        # or equivalent
        sameallscans = sd.merge(scan1, scan2)

\end{verbatim}


%% sd.quotient
\newpage
\ahfunction{sd.quotient}{Take a quotient of a signal and reference scan}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   Return the quotient of a 'source' (signal) scan and a 'reference' scan.
   The reference can have just one scan, even if the signal has many. Otherwise
   they must have the same number of scans.
   The cursor of the output scan is set to 0.

   The preserve argument controls if continuum is preserved or not.
   The equation used in the method depends on its value. 
   If preserve is True, the equation is,

   \begin{displaymath}
   T_{\rm a}^* = T_{\rm sys}^{\rm OFF} { ON \over OFF } - T_{\rm sys}^{\rm OFF},
   \end{displaymath}
   
   while if preserve is False, 

   \begin{displaymath}
   T_{\rm a}^* = T_{\rm sys}^{\rm OFF} { ON \over OFF } - T_{\rm sys}^{\rm ON},
   \end{displaymath}

   where $T_{\rm a}^*$ is antenna temperature, $ON$ and $OFF$ are 
   raw (uncalibrated) spectral data that correspond to on-source 
   and off-source position, $T_{\rm sys}^{\rm ON}$ and 
   $T_{\rm sys}^{\rm OFF}$ are system temperatures of $ON$ and $OFF$ scans, 
   respectively. 

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
source && \multicolumn{2}{p{3.36in}|}{The on-source scan as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
reference && \multicolumn{2}{p{3.36in}|}{The reference scan as a scantable}\\
& &allowed: & scantable\\
& &Default: & 
\\
preserve && \multicolumn{2}{p{3.36in}|}{Preserve the continuum or remove it}\\
& &allowed: & bool\\
& &Default: & True
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
scantable that contains calibrated specrta

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.rc
\newpage
\ahfunction{sd.rc}{Set the current rc parameters}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    Set the current rc parameters.  Group is the grouping for the rc, eg
    for scantable.save the group is 'scantable', for plotter.stacking, the
    group is 'plotter', and so on.  kwargs is a list of attribute
    name/value pairs, eg

      \begin{verbatim}
      rc('scantable', save='SDFITS')
      \end{verbatim}

    sets the current rc params and is equivalent to

      \begin{verbatim}
      rcParams['scantable.save'] = 'SDFITS'
      \end{verbatim}

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
group && \multicolumn{2}{p{3.36in}|}{Grouping for the rc}\\
& &allowed: & string ('','scantable','plotter') \\
& &Default: & 
\\
 && \multicolumn{2}{p{3.36in}|}{A list of attribute name/value pairs}\\
& &allowed: & comma separated list of name/value pairs\\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

     asap_init()
     # set scantable.save as 'SDFITS' and scantable.storage as 'disk'
     sd.rc('scantable',save='SDFITS', storage='disk')
     # set insitu as False
     sd.rc('',insitu=False)

\end{verbatim}


%% sd.skydip
\newpage
\ahfunction{sd.skydip}{Determine the opacity from a set of 'skydip' observations}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    Determine the opacity from a set of 'skydip' obervations.
    This can be any set of observations over a range of elevations,
    but will ususally be a dedicated (set of) scan(s).
    Return a list of 'n' opacities for 'n' IFs. In case of averagepol
    being 'False' a list of 'n*m' elements where 'm' is the number of
    polarisations, e.g.
    nIF = 3, nPol = 2 => [if0pol0, if0pol1, if1pol0, if1pol1, if2pol0, if2pol1]
    
    The opacity is determined by fitting a first order polynomial to:
    
        \begin{displaymath}
        T_{\rm sys}(airmass) = p_0 + airmass * p1,
        \end{displaymath}
    
    where
        \begin{displaymath}
        airmass = {1 \over \sin(elevation)}
        \end{displaymath}
        \begin{displaymath}
        \tau =  {p_1 \over T_{\rm sky} }
        \end{displaymath}
    

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
data && \multicolumn{2}{p{3.36in}|}{File name or scantable or list of them}\\
& &allowed: & string, string array, scantable, list of scantables \\
& &Default: & 
\\
averagepol && \multicolumn{2}{p{3.36in}|}{Return opacity values per polarization or average of opacities for the polarizations}\\
& &allowed: & bool \\
& &Default: & True 
\\
tsky && \multicolumn{2}{p{3.36in}|}{The sky temperature}\\
& &allowed: & float \\
& &Default: & 300.0 
\\
plot && \multicolumn{2}{p{3.36in}|}{Plot each fit (airmass versus Tsys)}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
float array (computed opacities)

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%% sd.splitant
\newpage
\ahfunction{sd.splitant}{Split Measurement Set data by antenna and save them as scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    Split Measurement Set by antenna name, save data as a scantables,
    and return a list of filename.
    Notice this method can only be available from \casa.
    The outprefix argument specifies a prefix of output scantable name.
    The names of output scantables will be 'outprefix.antenna1.asap', 
    'outprefix.antenna2.asap', ... where antenna1 and antenna2 is 
    antenna name that are stored in ANTENNA subtable of input Measurement 
    Set.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
filename && \multicolumn{2}{p{3.36in}|}{The name of Measurement Set to be read}\\
& &allowed: & string \\
& &Default: & 
\\
outprefix && \multicolumn{2}{p{3.36in}|}{The prefix of output scantable name}\\
& &allowed: & string \\
& &Default: & ''
\\
overwrite && \multicolumn{2}{p{3.36in}|}{If the file should be overwritten if it exists}\\
& &allowed: & bool \\
& &Default: & False
\\

\hline
\end{tabular}


\flushleft\vspace{.20in}\textbf {Returns}\newline
string array

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

     asap_init()
     # assume that input MS contains data from 'DV01' and 'PM03'
     outfiles=sd.splitant('osfdata.ms',outprefix='test')
     print outfiles
     ['test.DV01.asap','test.PM03.asap']
 
\end{verbatim}


%% sd.unique
\newpage
\ahfunction{sd.unique}{Return the unique values in a list}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
    This is an utility function that returns the unique values in a list
 
\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
x && \multicolumn{2}{p{3.36in}|}{The list to reduce}\\
& &allowed: & array \\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Returns}\newline
array 

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

   x=[1,2,3,3,4]
   y=sd.unique(x)
   print y
   [1,2,3,4]

\end{verbatim}


%% sd.welcome
\newpage
\ahfunction{sd.welcome}{Return a welcome message}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
   Return a welcome message

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline
string

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%%%%%% sd.scantable
\newpage
\ahobject{sd.scantable}{Representation of single-dish data format}
%\ahfunction{sd.scantable}{Representation of single-dish data format}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  The scantable is a representation of the Scantable, which is a data 
  format designed properly for single-dish data. 
  The scantable is implemented as \casa\ table so that it is possible 
  to access data via \ahlink{table}{table} tool. 
  On the other hand, the scantable has its own functions to get/set some data. 
  In addition to the simple setter/getter and utility functions, 
  the scantable has some data reduction function such as calibration, 
  baseline fitting, etc. 
  
  The 'insitu' option often appears in the functions. This parameter 
  controls if a certain operation is applied to the scantable itself 
  (true) or return another scantable that is a result of the operation 
  (false). 
  In former case, the original scantable will be lost. 
  The default value of the option depends on sd.rcParams dictionary. 
  See \ahlink{sd.list\_rcparameters}{sd:sd.list_rcparameters} for 
  details about sd.rcParams.

  The constructor takes several arguments that handles some of optional 
  behavior of it. The getpt and antenna arguments are only effective if 
  file specified by filename argument is Measurement Set format.

  \medskip\noindent\textbf{Definition}

    A documentation for detailed definition of the Scantable will be 
    prepared by ATNF.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
filename && \multicolumn{2}{p{3.36in}|}{Name of an input file, or a reference to an existing scantable (advanced)}\\
& &allowed: & string, scantable \\
& &Default: & 
\\
average && \multicolumn{2}{p{3.36in}|}{Average all integrations within a scan on read}\\
& &allowed: & bool \\
& &Default: & None (taken from scantable.autoaverage attribute of rc parameters)\\
unit && \multicolumn{2}{p{3.36in}|}{Brightness unit. It must be consistent with K or Jy. It overrides the default value or replaces the value in existing scantables}
\\
& &allowed: & string \\
& &Default: & None
\\
getpt && \multicolumn{2}{p{3.36in}|}{Measurement Set input data only. If True, all pointing data are filled.}\\
& &allowed: & bool\\
& &Default: & False
\\
antenna && \multicolumn{2}{p{3.36in}|}{Measurement Set input data only. Antenna selection by ID or name}\\
& &allowed: & string, integer\\
& &Default: & "" (first antenna in the ANTENNA table) 
\\
parallactify && \multicolumn{2}{p{3.36in}|}{Indicate that the data had been parallactified.}\\
& &allowed: & bool\\
& &Default: & None (taken from scantable.parallactify attribute of rc parameters)
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

     asap_init()
     # create scantable from the data from the second antenna in Measurement Set
     s=sd.scantable('sddata.ms',average=False,getpt=True,antenna=1)

\end{verbatim}


Methods
\begin{longtable}{ll}

	\ahlink{add}{sd:sd.scantable.add} &Return a scan where all spectra have the offset added \\

	\ahlink{auto\_poly\_baseline}{sd:sd.scantable.auto_poly_baseline} &Perform automatic line finding and baseline subtraction \\

	\ahlink{auto\_quotient}{sd:sd.scantable.auto_quotient} &Automatic quotient for coordinated scans \\

	\ahlink{average\_beam}{sd:sd.scantable.average_beam} &Average beams together for multi-beam observation \\

	\ahlink{average\_pol}{sd:sd.scantable.average_pol} &Average polarizations together \\

	\ahlink{average\_time}{sd:sd.scantable.average_time} &Return time average of a scan \\

	\ahlink{bin}{sd:sd.scantable.bin} &Perform binning of spectra \\

	\ahlink{chan2data}{sd:sd.scantable.chan2data} &Return channel/frequency/velocity and spectral value at an arbitrary row and channel \\

	\ahlink{clip}{sd:sd.scantable.clip} &Flag data by its spectral value \\

	\ahlink{convert\_flux}{sd:sd.scantable.convert_flux} &Return a scan where all spectra are converted to Jy or K \\

	\ahlink{convert\_pol}{sd:sd.scantable.convert_pol} &Convert data to a different polarization type \\

	\ahlink{copy}{sd:sd.scantable.copy} &Return a copy of this scantable \\

	\ahlink{create\_mask}{sd:sd.scantable.create_mask} &Return a bool array based on [min,max] windows \\

	\ahlink{drop\_scan}{sd:sd.scantable.drop_scan} &Return a new scantable where the specified scan number(s) are dropped \\

	\ahlink{flag}{sd:sd.scantable.flag} & Flag selected data using specified mask (channel based flag) \\

	\ahlink{flag\_nan}{sd:sd.scantable.flag_nan} &Flag NaN values\\

	\ahlink{flag\_row}{sd:sd.scantable.flag_row} &Flag spectra based on specified rows (row based flag)\\

	\ahlink{freq\_align}{sd:sd.scantable.freq_align} &Perform frequency alignment \\

	\ahlink{freq\_switch}{sd:sd.scantable.freq_switch} &Apply frequency switching to the data\\

	\ahlink{gain\_el}{sd:sd.scantable.gain_el} &Apply gain-elevation correction based on user-provided correction factors\\

	\ahlink{get\_abcissa}{sd:sd.scantable.get_abcissa} &Get the abcissa values and format string that represents current coordinate setup \\

	\ahlink{get\_antennaname}{sd:sd.scantable.get_antennaname} &Get antenna name\\

	\ahlink{get\_azimuth}{sd:sd.scantable.get_azimuth} &Get a list of azimuth during the observation \\

	\ahlink{get\_column\_names}{sd:sd.scantable.get_column_names} &Get a list of column names in the main table\\

	\ahlink{get\_coordinate}{sd:sd.scantable.get_coordinate} &Return the spectral coordinate for a given row as a \ahlink{coordinate}{sd.coordinate} object \\

	\ahlink{get\_direction}{sd:sd.scantable.get_direction} &Get a list of positions on the sky as a string \\

	\ahlink{get\_directionval}{sd:sd.scantable.get_directionval} &Get a list of positions on the sky as a float \\

	\ahlink{get\_elevation}{sd:sd.scantable.get_elevation} &Get a list of elevation during the observation \\

	\ahlink{get\_fit}{sd:sd.scantable.get_fit} &Get the stored fits for a row in scantable \\

	\ahlink{get\_fluxunit}{sd:sd.scantable.get_fluxunit} &Get a flux unit \\

	\ahlink{get\_inttime}{sd:sd.scantable.get_inttime} &Get a list of integration times for the observation \\

	\ahlink{get\_mask}{sd:sd.scantable.get_mask} &Get mask for the specified row as a bool list \\

	\ahlink{get\_mask\_indices}{sd:sd.scantable.get_mask_indices} &Compute and return lists of mask start indices and mask end indices from the given bool array \\

	\ahlink{get\_masklist}{sd:sd.scantable.get_masklist} &Compute and return a list of mask windows [min,max] from the given bool array \\

	\ahlink{get\_parangle}{sd:sd.scantable.get_parangle} &Get a list of parallactic angles for the observation \\

	\ahlink{get\_restfreqs}{sd:sd.scantable.get_restfreqs} &Get the rest frequency(s) stored in the scantable \\

	\ahlink{get\_row}{sd:sd.scantable.get_row} &Return a scantable with single row \\

	\ahlink{get\_row\_selector}{sd:sd.scantable.get_row_selector} &Return a \ahlink{selector}{sd:sd.selector} object that only selects target row \\

	\ahlink{get\_scan}{sd:sd.scantable.get_scan} &Return a specified scan(s) specified by scan number or source name as a new scantable\\

	\ahlink{get\_selection}{sd:sd.scantable.get_selection} &Get current selection that is currently set on this scantable \\

	\ahlink{get\_sourcename}{sd:sd.scantable.get_sourcename} &Get a list of source names for the observation \\

	\ahlink{get\_spectrum}{sd:sd.scantable.get_spectrum} &Get the spectrum for the current row \\

	\ahlink{get\_time}{sd:sd.scantable.get_time} &Get a list of time stamps for the observation \\

	\ahlink{get\_tsys}{sd:sd.scantable.get_tsys} &Get a list of system temperatures \\

	\ahlink{get\_unit}{sd:sd.scantable.get_unit} &Get the default unit of spectral axis \\

	\ahlink{get\_weather}{sd:sd.scantable.get_weather} &Get the weather informations \\

	\ahlink{getbeam}{sd:sd.scantable.getbeam} &Get beam number of the given row \\

	\ahlink{getbeamnos}{sd:sd.scantable.getbeamnos} &Get a list of beam numbers in the scantable \\

	\ahlink{getcycle}{sd:sd.scantable.getcycle} &Get cycle number of the given row \\

	\ahlink{getif}{sd:sd.scantable.getif} &Get IF number of the given row \\

	\ahlink{getifnos}{sd:sd.scantable.getifnos} &Get a list of IF nubers in the scantable \\

	\ahlink{getmolnos}{sd:sd.scantable.getmolnos} &Get a list of molecule ids in the scantable \\

	\ahlink{getpol}{sd:sd.scantable.getpol} &Get polarization number of the given row \\

	\ahlink{getpolnos}{sd:sd.scantable.getpolnos} &Get a list of polarization numbers in the scantable \\

	\ahlink{getscan}{sd:sd.scantable.getscan} &Get scan number of the given row \\

	\ahlink{getscannos}{sd:sd.scantable.getscannos} &Get a list of scan numbers in the scantable \\

	\ahlink{history}{sd:sd.scantable.history} &Print a history \\

	\ahlink{invert\_phase}{sd:sd.scantable.invert_phase} &Invert the phase of the complex polarization \\

	\ahlink{lag\_flag}{sd:sd.scantable.lag_flag} &Perform Fourier filtering on the spectra \\

	\ahlink{mx\_quotient}{sd:sd.scantable.mx_quotient} &Form a quotient using "off" beams when observing in "MX" mode \\

	\ahlink{nbeam}{sd:sd.scantable.nbeam} &Return a number of beams \\

	\ahlink{nchan}{sd:sd.scantable.nchan} &Return a number of channels \\

	\ahlink{ncycle}{sd:sd.scantable.ncycle} &Return a number of cycles \\

	\ahlink{nif}{sd:sd.scantable.nif} &Return a number of IFs \\

	\ahlink{npol}{sd:sd.scantable.npol} &Return a number of polarizations \\

	\ahlink{nrow}{sd:sd.scantable.nrow} &Return a number of rows \\

	\ahlink{nscan}{sd:sd.scantable.nscan} &Return a number of scans \\

	\ahlink{old\_poly\_baseline}{sd:sd.scantable.old_poly_baseline} &Older version of baseline subtraction function \\

	\ahlink{opacity}{sd:sd.scantable.opacity} &Apply an opacity correction \\

	\ahlink{parallactify}{sd:sd.scantable.parallactify} &Set a flag to indicate the data should be treated as "parallactified"  \\

	\ahlink{poltype}{sd:sd.scantable.poltype} &Get a plarization type \\

	\ahlink{poly\_baseline}{sd:sd.scantable.poly_baseline} &Perform a baseline subtraction \\

	\ahlink{recalc\_azel}{sd:sd.scantable.recalc_azel} &Recalculate azimuth and elevation for each sky position \\

	\ahlink{resample}{sd:sd.scantable.resample} &Perform a binning \\

	\ahlink{rotate\_linpolphase}{sd:sd.scantable.rotate_linpolphase} &Rotate a phase of the complex polarization \\

	\ahlink{rotate\_xyphase}{sd:sd.scantable.rotate_xyphase} &Rotate a phase of the XY correlation \\

	\ahlink{save}{sd:sd.scantable.save} &Store the scantable on disk \\

	\ahlink{scale}{sd:sd.scantable.scale} &Scale spectra by the given factor \\

	\ahlink{set\_dirframe}{sd:sd.scantable.set_dirframe} &Set the frame type of the direction on the sky \\

	\ahlink{set\_doppler}{sd:sd.scantable.set_doppler} &Set definition of the Doppler correction  \\

	\ahlink{set\_feedtype}{sd:sd.scantable.set_feedtype} &Set the feed type \\

	\ahlink{set\_fluxunit}{sd:sd.scantable.set_fluxunit} &Set flux unit \\

	\ahlink{set\_freqframe}{sd:sd.scantable.set_freqframe} &Set the frame type of the spectral axis \\

	\ahlink{set\_instrument}{sd:sd.scantable.set_instrument} &Set antenna name \\

	\ahlink{set\_restfreqs}{sd:sd.scantable.set_restfreqs} &Set rest frequency \\

	\ahlink{set\_selection}{sd:sd.scantable.set_selection} &Select a subset of the data \\

	\ahlink{set\_sourcetype}{sd:sd.scantable.set_sourcetype} &Set the types of source to be source or reference scan \\

	\ahlink{set\_spectrum}{sd:sd.scantable.set_spectrum} &Set spectrum for specified row \\

	\ahlink{set\_unit}{sd:sd.scantable.set_unit} &Set unit for spectral axis \\

	\ahlink{shift\_refpix}{sd:sd.scantable.shift_refpix} &Shift the reference pixel of the spectral coordinate \\

	\ahlink{smooth}{sd:sd.scantable.smooth} &Smooth the spectra \\

	\ahlink{stats}{sd:sd.scantable.stats} &Compute specified statistics of the spectra \\

	\ahlink{stddev}{sd:sd.scantable.stddev} &Compute standard deviation of the spectra \\

	\ahlink{summary}{sd:sd.scantable.summary} &Print a summary of the contents of the scantable \\

	\ahlink{swap\_linears}{sd:sd.scantable.swap_linears} &Swap the linear polarizations XX and YY \\

\end{longtable}

\newpage
\ahfunction{sd.scantable.add}{Return a scan where all spectra have the offset added}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.auto\_poly\_baseline}{sd.scantable.auto_poly_baseline}{Perform automatic line finding and baseline subtraction}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.auto\_quotient}{sd.scantable.auto_quotient}{Automatic quotient for coordinated scans}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.average\_beam}{sd.scantable.average_beam}{Average beams together for multi-beam observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.average\_pol}{sd.scantable.average_pol}{Average polarizations together}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.average\_time}{sd.scantable.average_time}{Return time average of a scan}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.bin}{Perform binning of spectra}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.chan2data}{Return channel/frequency/velocity and spectral value at an arbitrary row and channel}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.clip}{Flag data by its spectral value}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.convert\_flux}{sd.scantable.convert_flux}{Return a scan where all spectra are converted to Jy or K}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.convert\_pol}{sd.scantable.convert_pol}{Convert data to a different polarization type}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.copy}{Return a copy of this scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.create\_mask}{sd.scantable.create_mask}{Return a bool array based on [min,max] windows}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.drop\_scan}{sd.scantable.drop_scan}{Return a new scantable where the specified scan number(s) are dropped}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.flag}{Flag selected data using specified mask (channel based flag)}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.flag\_nan}{sd.scantable.flag_nan}{Flag NaN values}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.flag\_row}{sd.scantable.flag_row}{Flag spectra based on specified rows (row based flag)}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.freq\_align}{sd.scantable.freq_align}{Perform frequency alignment}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.freq\_switch}{sd.scantable.freq_switch}{Apply frequency switching to the data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.gain\_el}{sd.scantable.gain_el}{Apply gain-elevation correction based on user-provided correction factors}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_abcissa}{sd.scantable.get_abcissa}{Get the abcissa values and format string that represents current coordinate setup}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_antennaname}{sd.scantable.get_antennaname}{Get antenna name}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_azimuth}{sd.scantable.get_azimuth}{Get a list of azimuth during the observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_column\_names}{sd.scanatable.get_column_names}{Get a list of column names in the main table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_coordinate}{sd.scantable.get_coordinate}{Return the spectral coordinate for a given row as a \ahlink{coordinate}{sd.coordinate} object}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_direction}{sd.scantable.get_direction}{Get a list of positions on the sky as a string}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_directionval}{sd.scantable.get_directionval}{Get a list of positions on the sky as a float}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_elevation}{sd.scantable.get_elevation}{Get a list of elevation during the observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_fit}{sd.scantable.get_fit}{Get the stored fits for a row in scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_fluxunit}{sd.scantable.get_fluxunit}{Get a flux unit}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_inttime}{sd.scantable.get_inttime}{Get a list of integration times for the observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_mask}{sd.scantable.get_mask}{Get mask for the specified row as a bool list}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_mask\_indices}{sd.scantable.get_mask_indices}{Compute and return lists of mask start indices and mask end indices from the given bool array}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_masklist}{sd.scantable.get_masklist}{Compute and return a list of mask windows [min,max] from the given bool array}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_parangle}{sd.scantable.get_parangle}{Get a list of parallactic angles for the observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_restfreqs}{sd.scantable.get_restfreqs}{Get the rest frequency(s) stored in the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_row}{sd.scantable.get_row}{Return a scantable with single row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_row\_selector}{sd.scantable.get_row_selector}{Return a \ahlink{selector}{sd:sd.selector} object that only selects target row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_scan}{sd.scantable.get_scan}{Return a specified scan(s) specified by scan number or source name as a new scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_selection}{sd.scantable.get_selection}{Get current selection that is currently set on this scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_sourcename}{sd.scantable.get_sourcename}{Get a list of source names for the observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_spectrum}{sd.scantable.get_spectrum}{Get the spectrum for the current row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_time}{sd.scantable.get_time}{Get a list of time stamps for the observation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_tsys}{sd.scantable.get_tsys}{Get a list of system temperatures}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_unit}{sd.scantable.get_unit}{Get the default unit of spectral axis}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.get\_weather}{sd.scantable.get_weather}{Get the weather informations}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getbeam}{Get beam number of the given row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getbeamnos}{Get a list of beam numbers in the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getcycle}{Get cycle number of the given row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getif}{Get IF number of the given row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getifnos}{Get a list of IF nubers in the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getmolnos}{Get a list of molecule ids in the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getpol}{Get polarization number of the given row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getpolnos}{Get a list of polarization numbers in the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getscan}{Get scan number of the given row }

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.getscannos}{Get a list of scan numbers in the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.history}{Print a history}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.invert\_phase}{sd.scantable.invert_phase}{Invert the phase of the complex polarization}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.lag\_flag}{sd.scantable.lag_flag}{Perform Fourier filtering on the spectra}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.mx\_quotient}{sd.scantable.mx_quotient}{Form a quotient using "off" beams when observing in "MX" mode}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.nbeam}{Return a number of beams}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.nchan}{Return a number of channels}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.ncycle}{Return a number of cycles}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.nif}{Return a number of IFs}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.npol}{Return a number of polarizations}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.nrow}{Return a number of rows}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.nscan}{Return a number of scans}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.old\_poly\_baseline}{sd.scantable.old_poly_baseline}{Older version of baseline subtraction function}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.opacity}{Apply an opacity correction}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.parallactify}{Set a flag to indicate the data should be treated as "parallactified"}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.poltype}{Get a plarization type}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.poly\_baseline}{sd.scantable.poly_baseline}{Perform a baseline subtraction}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.recalc\_azel}{sd.scantable.recalc_azel}{Recalculate azimuth and elevation for each sky position}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.resample}{Perform a binning}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.rotate\_linpolphase}{sd.scantable.rotate_linpolphase}{Rotate a phase of the complex polarization}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.rotate\_xyphase}{sd.scantable.rotate_xyphase}{Rotate a phase of the XY correlation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.save}{Store the scantable on disk}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.scale}{Scale spectra by the given factor}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_dirframe}{sd.scantable.set_dirframe}{Set the frame type of the direction on the sky}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_doppler}{sd.scantable.set_doppler}{Set definition of the Doppler correction}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_feedtype}{sd.scantable.set_feedtype}{Set the feed type}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_fluxunit}{sd.scantable.set_fluxunit}{Set flux unit}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_freqframe}{sd.scantable.set_freqframe}{Set the frame type of the spectral axis}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_instrument}{sd.scantable.set_instrument}{Set antenna name}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_restfreqs}{sd.scantable.set_restfreqs}{Set rest frequency}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_selection}{sd.scantable.set_selection}{Select a subset of the data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_sourcetype}{sd.scantable.set_sourcetype}{Set the types of source to be source or reference scan}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_spectrum}{sd.scantable.set_spectrum}{Set spectrum for specified row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.set\_unit}{sd.scantable.set_unit}{Set unit for spectral axis}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.shift\_refpix}{sd.scantable.shift_refpix}{Shift the reference pixel of the spectral coordinate}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.smooth}{Smooth the spectra}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.stats}{Compute specified statistics of the spectra}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.stddev}{Compute standard deviation of the spectra}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.scantable.summary}{Print a summary of the contents of the scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.scantable.swap\_linears}{sd.scantable.swap_linears}{Swap the linear polarizations XX and YY}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%%%%% sd.selector
\newpage
\ahobject{sd.selector}{Data selection tool for single-dish data}
%\ahfunction{sd.selector}{Data selection tool for single-dish data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  The selector is a data selection object that affects a 
  \ahlink{scantable}{sd:sd.scantable} object via 
  \ahlink{set\_selection}{sd:sd.scantable.set_selection} function.
  Selection by the following attributes are available:

\begin{itemize}
\item scan number
\item beam number
\item cycle number
\item IF number
\item source name (allows regular expression)
\item polarization number
\item row number
\item source type
\item value of system temperature (minimum and maximum threshold)
\end{itemize}

  In addition, the selector provides interface for more flexible data 
  selection using
  \htmladdnormallink{TaQL}{http://aips2.nrao.edu/docs/notes/199/199.html}.

  The selector also support sorting data. 
  The selector sorts data based on values of columns specified by the user.

  The constructor takes some arguments to set selection criteria. So,  
  the user can set selection either using constructor options and 
  available setter functions.

  \medskip\noindent\textbf{Known Issues}

    After the data in scantable is selected by the selector object, 
    \ahlink{save}{sd:sd.scantable.save} function doesn't work.
    Before saving selected data, you must \ahlink{copy}{sd:sd.scantable.copy} 
    scantable first, and save it as usual.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
beams && \multicolumn{2}{p{3.36in}|}{Beam selection}\\
& &allowed: & integer, integer array \\
& &Default: & None (no selection)
\\
cycles && \multicolumn{2}{p{3.36in}|}{Cycle number selection}\\
& &allowed: & integer, integer array \\
& &Default: & None (no selection)
\\
ifs && \multicolumn{2}{p{3.36in}|}{IF selection}\\
& &allowed: & integer, integer array \\
& &Default: & None (no selection)
\\
name && \multicolumn{2}{p{3.36in}|}{Source name selection. Allows regular expression.}\\
& &allowed: & string\\
& &Default: & None (no selection)
\\
pols && \multicolumn{2}{p{3.36in}|}{Polarization selection}\\
& &allowed: & integer, integer array, string, string array \\
& &Default: & None (no selection)
\\
query && \multicolumn{2}{p{3.36in}|}{TaQL selection query}\\
& &allowed: & string \\
& &Default: & None (no selection)
\\
scans && \multicolumn{2}{p{3.36in}|}{Scan number selection}\\
& &allowed: & integer, integer array \\
& &Default: & None (no selection)\\


\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\begin{verbatim}

     asap_init()
     # create a selector object
     sel=sd.selector()
     # These are equivalent if data is 'linear'
     sel.set_polarisations(["XX","Re(XY)"])
     sel.set_polarisations([0,2])
     # reset the polarisation selection
     sel.set_polarisations()
     # these are equivalent
     sel2=sd.selector(ifs=[0,1])
     sel2=sd.selector()
     sel2.set_ifs([0,1])

\end{verbatim}


Methods
\begin{longtable}{ll}

	\ahlink{get\_beams}{sd:sd.selector.get_beams} &Return a list of current beam selection \\

	\ahlink{get\_cycles}{sd:sd.selector.get_cycles} &Return a list of current cycle selection \\

	\ahlink{get\_ifs}{sd:sd.selector.get_ifs} &Return a list of current IF selection \\

	\ahlink{get\_name}{sd:sd.selector.get_name} &Return a list of selection strings for source name  \\

	\ahlink{get\_order}{sd:sd.selector.get_order} &Return a list of columns used for sorting \\

	\ahlink{get\_pols}{sd:sd.selector.get_pols} &Return a list of current polarization selection \\

	\ahlink{get\_poltypes}{sd:sd.selector.get_poltypes} &Return a polarization type for current polarization selection \\

	\ahlink{get\_query}{sd:sd.selector.get_query} &Return current selection string for TaQL selection \\

	\ahlink{get\_scans}{sd:sd.selector.get_scans} &Return a list of current scan selection \\

	\ahlink{get\_types}{sd:sd.selector.get_types} &Return a list of current source type selection \\

	\ahlink{is\_empty}{sd:sd.selector.is_empty} &Check if any selection has been set \\

	\ahlink{reset}{sd:sd.selector.reset} &Unset all selections \\

	\ahlink{set\_beams}{sd:sd.selector.set_beams} &Set a sequence of beam numbers \\

	\ahlink{set\_cycles}{sd:sd.selector.set_cycles} &Set a sequence of cycle numbers \\

	\ahlink{set\_ifs}{sd:sd.selector.set_ifs} &Set a sequence of IF numbers \\

	\ahlink{set\_name}{sd:sd.selector.set_name} &Set a selection based on a source name \\

	\ahlink{set\_order}{sd:sd.selector.set_order} &Set column names that is used for sorting data \\

	\ahlink{set\_polarisations}{sd:sd.selector.set_polarisations} &Set a sequence of polarization numbers or strings \\

	\ahlink{set\_polarizations}{sd:sd.selector.set_polarizations} &Set a sequence of polarization numbers or strings\\

	\ahlink{set\_pols}{sd:sd.selector.set_pols} &Set a sequence of polarization numbers or strings \\

	\ahlink{set\_query}{sd:sd.selector.set_query} &Set a selection string based on TaQL \\

	\ahlink{set\_rows}{sd:sd.selector.set_rows} &Set a sequence of row numbers \\

	\ahlink{set\_scans}{sd:sd.selector.set_scans} &Set a sequence of scan numbers  \\

	\ahlink{set\_tsys}{sd:sd.selector.set_tsys} &Set range of system temperature \\

	\ahlink{set\_types}{sd:sd.selector.set_types} &Set a sequence of source types \\

\end{longtable}

\newpage
\ahsdfunction{sd.selector.get\_beams}{sd.selector.get_beams}{Return a list of current beam selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_cycles}{sd.selector.get_cycles}{Return a list of current cycle selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_ifs}{sd.selector.get_ifs}{Return a list of current IF selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_name}{sd.selector.get_name}{Return a list of selection strings for source name }

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_order}{sd.selector.get_order}{Return a list of columns used for sorting}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_pols}{sd.selector.get_pols}{Return a list of current polarization selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_poltypes}{sd.selector.get_poltypes}{Return a polarization type for current polarization selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_query}{sd.selector.get_query}{Return current selection string for TaQL selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_scans}{sd.selector.get_scans}{Return a list of current scan selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.get\_types}{sd.selector.get_types}{Return a list of current source type selection}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.is\_empty}{sd.selector.is_empty}{Check if any selection has been set}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.selector.reset}{Unset all selections}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_beams}{sd.selector.set_beams}{Set a sequence of beam numbers}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_cycles}{sd.selector.set_cycles}{Set a sequence of cycle numbers}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_ifs}{sd.selector.set_ifs}{Set a sequence of IF numbers}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_name}{sd.selector.set_name}{Set a selection based on a source name}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_order}{sd.selector.set_order}{Set column names that is used for sorting data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_polarisations}{sd.selector.set_polarisations}{Set a sequence of polarization numbers or strings}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_polarizations}{sd.selector.set_polarizations}{Set a sequence of polarization numbers or strings}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_pols}{sd.selector.set_pols}{Set a sequence of polarization numbers or strings}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_query}{sd.selector.set_query}{Set a selection string based on TaQL}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_rows}{sd.selector.set_rows}{Set a sequence of row numbers}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_scans}{sd.selector.set_scans}{Set a sequence of scan numbers}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_tsys}{sd.selector.set_tsys}{Set range of system temperature}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.selector.set\_types}{sd.selector.set_types}{Set a sequence of source types}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%%%%% sd.fitter
\newpage
\ahobject{sd.fitter}{General fitting tool}
%\ahfunction{sd.fitter}{General fitting tool}


\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  The fitter is an object to fit data. This contains both baseline fitting 
  and spectral line fitting. For baseline fitting, simple polynomial fitting 
  with arbitrary order is available. For spectral line fitting, Gaussian 
  and Lorentzian fitting are supported. It allows fitting of multiple 
  lines, but it doesn't support hyperfine fitting, i.e. multiple line 
  fitting under some constraints.

  The constructor doesn't take any arguments. It just creates a fitter 
  object that no state is set.

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

        asap_init()
        s = sd.scantable('myscan.asap')
        s.set_cursor(thepol=1)        # select second pol
        f = sd.fitter()               # create fitter object
        f.set_scan(s)
        f.set_function(poly=0)
        f.fit(row=0)                  # fit first row

\end{verbatim}

Methods
\begin{longtable}{ll}

	\ahlink{auto\_fit}{sd:sd.fitter.auto_fit} & Return a scan where the function is applied to all rows \\

	\ahlink{commit}{sd:sd.fitter.commit} & Return a new scan where the fits have been subtracted \\

	\ahlink{fit}{sd:sd.fitter.fit} & Execute actual fitting process\\

	\ahlink{get\_area}{sd:sd.fitter.get_area} & Return the area under the fitted gaussian/lorentzian component \\

	\ahlink{get\_chi2}{sd:sd.fitter.get_chi2} & Return chi^2 value \\

	\ahlink{get\_errors}{sd:sd.fitter.get_errors} & Return the errors in parameters \\

	\ahlink{get\_estimates}{sd:sd.fitter.get_estimates} & Return the parameter estimates \\

	\ahlink{get\_fit}{sd:sd.fitter.get_fit} & Return the fitted ordinate values \\

	\ahlink{get\_parameters}{sd:sd.fitter.get_parameters} & Return the fit parameters \\

	\ahlink{get\_residual}{sd:sd.fitter.get_residual} & Return the residual of the fit \\

	\ahlink{plot}{sd:sd.fitter.plot} & Plot fit \\

	\ahlink{set\_data}{sd:sd.fitter.set_data} & Set the abcissa and ordinate for the fit \\

	\ahlink{set\_function}{sd:sd.fitter.set_function} & Set the function to be fitted \\

	\ahlink{set\_gauss\_parameters}{sd:sd.fitter.set_gauss_parameters} & Set the parameters of Gaussian component \\

	\ahlink{set\_lorentz\_parameters}{sd:sd.fitter.set_lorentz_parameters} & Set the parameters of Lorentzian component \\

	\ahlink{set\_parameters}{sd:sd.fitter.set_parameters} & Set the parameters to be fitted \\

	\ahlink{set\_scan}{sd:sd.fitter.set_scan} & Set the data as a scantable \\

	\ahlink{store\_fit}{sd:sd.fitter.store_fit} & Save fit parameters \\

\end{longtable}

\newpage
\ahsdfunction{sd.fitter.auto\_fit}{sd.fitter.auto_fit}{Return a scan where the function is applied to all rows}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.fitter.commit}{Return a new scan where the fits have been subtracted}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.fitter.fit}{Execute actual fitting process}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_area}{sd.fitter.get_area}{Return the area under the fitted gaussian/lorentzian component}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_chi2}{sd.fitter.get_chi2}{Return chi^2 value}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_errors}{sd.fitter.get_errors}{Return the errors in parameters}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_estimates}{sd.fitter.get_estimates}{Return the parameter estimates}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_fit}{sd.fitter.get_fit}{Return the fitted ordinate values}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_parameters}{sd.fitter.get_parameters}{Return the fit parameters}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.get\_residual}{sd.fitter.get_residual}{Return the residual of the fit}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.fitter.plot}{Plot fit}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.set\_data}{sd.fitter.set_data}{Set the abcissa and ordinate for the fit}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.set\_function}{sd.fitter.set_function}{Set the function to be fitted}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.set\_gauss\_parameters}{sd.fitter.set_gauss_parameters}{Set the parameters of Gaussian component}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.set\_lorentz\_parameters}{sd.fitter.set_lorentz_parameters}{Set the parameters of Lorentzian component}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.set\_parameters}{sd.fitter.set_parameters}{Set the parameters to be fitted}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.set\_scan}{sd.fitter.set_scan}{Set the data as a scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.fitter.store\_fit}{sd.fitter.store_fit}{Save fit parameters}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%%%%% sd.linecatalog
\newpage
\ahobject{sd.linecatalog}{Line catalog}
%\ahfunction{sd.linecatalog}{Line catalog}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  The linecatalog is a wrapper for line catalog data base. 
  These can be either ASCII tables or the tables saved from this class.
  The table consists of the following items:

  \begin{itemize}
  \item row index in the table
  \item name of the species
  \item line frequency 
  \item frequency error
  \item line intensity
  \end{itemize}

  The user can filter lines by name, frequency range, or intensity range.
  It is possible to overlay line catalog on the spectral plot using 
  \ahlink{plotter.plot\_lines}{sd:sd.plotter.plot_lines}.

  For ASCII type input table, Comments can be present through lines 
  starting with '\#'.

  The constructor takes string that specifies a name of the catalog.

  \medskip\noindent\textbf{Known Issues}

   The name of species canno't contain spaces. If it does, it has to be 
   wrapped in double-quotes. 

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
name&& \multicolumn{2}{p{3.36in}|}{Name of the catalog}\\
& &allowed: & string\\
& &Default: & 
\\

\hline
\end{tabular}

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

        asap_init()
        l = sd.linecatalog('jpl_asap.tbl')
        # print summary
        l.summary()

\end{verbatim}

  
Methods
\begin{longtable}{ll}

	\ahlink{get\_frequency}{sd:sd.linecatalog.get_frequency} & Get frequency in a specified row \\

	\ahlink{get\_name}{sd:sd.linecatalog.get_name} & Get name of specie in a specified row \\

	\ahlink{get\_row}{sd:sd.linecatalog.get_row} & Get the values in a specified row \\

	\ahlink{nrow}{sd:sd.linecatalog.nrow} & Get number of rows in the table \\

	\ahlink{reset}{sd:sd.linecatalog.reset} & Unset all filtering to the table \\

	\ahlink{save}{sd:sd.linecatalog.save} & Save the subset of the table to disk \\

	\ahlink{set\_frequency\_limits}{sd:sd.linecatalog.set_frequency_limits} & Set frequency limit on the table \\

	\ahlink{set\_name}{sd:sd.linecatalog.set_name} & Set a name restriction on the table \\

	\ahlink{set\_strength\_limits}{sd:sd.linecatalog.set_strength_limits} & Set line strength limit on the table \\

	\ahlink{summary}{sd:sd.linecatalog.summary} & Print the contents of the table \\

\end{longtable}

\newpage
\ahsdfunction{sd.linecatalog.get\_frequency}{sd.linecatalog.get_frequency}{Get frequency in a specified row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linecatalog.get\_name}{sd.linecatalog.get_name}{Get name of specie in a specified row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linecatalog.get\_row}{sd.linecatalog.get_row}{Get the values in a specified row}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.linecatalog.nrow}{Get number of rows in the table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.linecatalog.reset}{Unset all filtering to the table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.linecatalog.save}{Save the subset of the table to disk}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linecatalog.set\_frequency\_limits}{sd.linecatalog.set_frequency_limits}{Set frequency limit on the table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linecatalog.set\_name}{sd.linecatalog.set_name}{Set a name restriction on the table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linecatalog.set\_strength\_limits}{sd.linecatalog.set_strength_limits}{Set line strength limit on the table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.linecatalog.summary}{Print the contents of the table}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\



%%%%% sd.linefinder
\newpage
\ahobject{sd.linefinder}{Line finder tool for single-dish spectrum}
%\ahfunction{sd.linefinder}{Line finder tool for single-dish spectrum}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\
  
  The linefinder performs automated spectral line search.
  The algorithm involves a simple threshold criterion. The line is
  considered to be detected if a specified number of consequtive
  channels (default is 3) is brighter (with respect to the current baseline
  estimate) than the threshold times the noise level. This criterion is
  applied in the iterative procedure updating baseline estimate and trying
  reduced spectral resolutions to detect broad lines as well. The off-line
  noise level is determined at each iteration as an average of 80% of the
  lowest variances across the spectrum (i.e. histogram equalization is
  used to avoid missing weak lines if strong ones are present). For
  bad baseline shapes it is recommended to increase the threshold and
  possibly switch the averaging option off (see set_options) to
  detect strong lines only, fit a high order baseline and repeat the line
  search.

  The constructor doesn't take any arguments. It creates linefinder 
  object without any settings for line finding.

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\
\begin{verbatim}

       asap_init()
       fl=sd.linefinder()
       sc=sd.scantable('sddata.asap',average=False)
       # set data
       fl.set_scan(sc)
       # set linefinder options
       fl.set_options(threshold=3)
       # search lines
       nlines=fl.find_lines(edge=(50,0))
       # get range of lines found
       if nlines!=0:
          print "Found ",nlines," spectral lines"
          print fl.get_ranges(False)
       else:
          print "No lines found!"
       # baseline subtraction using masks provided by linefinder
       sc2=sc.poly_baseline(fl.get_mask(),7)

\end{verbatim}

    
Methods
\begin{longtable}{ll}

	\ahlink{find\_lines}{sd:sd.linefinder.find_lines} & Search for spectral lines in the scan \\

	\ahlink{get\_mask}{sd:sd.linefinder.get_mask} & Get the mask to mask all lines that have been found \\

	\ahlink{get\_ranges}{sd:sd.linefinder.get_ranges} & Get ranges for all spectral lines found \\

	\ahlink{set\_options}{sd:sd.linefinder.set_options} & Set the parameters of the line finding algorithm \\

	\ahlink{set\_scan}{sd:sd.linefinder.set_scan} & Set the data as a scantable \\

\end{longtable}

\newpage
\ahsdfunction{sd.linefinder.find\_lines}{sd.linefinder.find_lines}{Search for spectral lines in the scan}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linefinder.get\_mask}{sd.linefinder.get_mask}{Get the mask to mask all lines that have been found}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linefinder.get\_ranges}{sd.linefinder.get_ranges}{Get ranges for all spectral lines found}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linefinder.set\_options}{sd.linefinder.set_options}{Set the parameters of the line finding algorithm}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.linefinder.set\_scan}{sd.linefinder.set_scan}{Set the data as a scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\


%%%%% sd.plotter
\newpage
\ahobject{sd.plotter}{Single-dish specific plotter tool}
%\ahfunction{sd.sdplotter}{Single-dish specific plotter tool}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  This is a plotter object that is properly designed for single-dish tool.
  It supports stacking, multi-panel plotting, and multi-page plotting of 
  spectral plot (channel/frequency/velocity versus spectral data).
  For total power (single-channel) data, it provides special function to 
  plot total power data versus time. 
  It also supports to plot time variation of azimuth and elevation and 
  to plot pointing directions on the sky.

  \medskip\noindent\textbf{Known Issues}

   The multi-page plotting doesn't support to go back previous page 
   at the moment, it only allows to go forward.  

Methods
\begin{longtable}{ll}

	\ahlink{annotate}{sd:sd.plotter.annotate} & Annotate text at specified location \\

	\ahlink{arrow}{sd:sd.plotter.arrow} & Draw arrow on specified axis \\

	\ahlink{axhline}{sd:sd.plotter.axhline} & Draw a horizontal line \\

	\ahlink{axhspan}{sd:sd.plotter.axhspan} & Draw a horizontal rectangle \\

	\ahlink{axvline}{sd:sd.plotter.axvline} & Draw a vertical line \\

	\ahlink{axvspan}{sd:sd.plotter.axvspan} & Draw a vertical rectangle \\

	\ahlink{create\_mask}{sd:sd.plotter.create_mask} & Interactively define a mask \\

	\ahlink{figtext}{sd:sd.plotter.figtext} & Add text to figure at specified location \\

	\ahlink{gca}{sd:sd.plotter.gca} & Get current axes \\

	\ahlink{plot}{sd:sd.plotter.plot} & Plot a scantable \\

	\ahlink{plot\_lines}{sd:sd.plotter.plot_lines} & Plot a line catalog \\

	\ahlink{plotazel}{sd:sd.plotter.plotazel} & Plot azimuth and elevation versus time of a scantable \\

	\ahlink{plotpointing}{sd:sd.plotter.plotpointing} & Plot telescope pointings in a scantable \\

	\ahlink{plottp}{sd:sd.plotter.plottp} & Plot total power data \\

	\ahlink{print\_header}{sd:sd.plotter.print_header} & Print header of the scantable on the plot and/or logger \\

	\ahlink{refresh}{sd:sd.plotter.refresh} & Do a soft refresh on the plot \\

	\ahlink{save}{sd:sd.plotter.save} & Save the plot to a file \\

	\ahlink{set\_abcissa}{sd:sd.plotter.set_abcissa} & Set the x-axis label of the plot \\

	\ahlink{set\_colors}{sd:sd.plotter.set_colors} & Set the colors to be used \\

	\ahlink{set\_colours}{sd:sd.plotter.set_colours} & Set the colors to be used \\

	\ahlink{set\_data}{sd:sd.plotter.set_data} & Set a scantable to plot \\

	\ahlink{set\_font}{sd:sd.plotter.set_font} & Set font properties \\

	\ahlink{set\_histogram}{sd:sd.plotter.set_histogram} & Enable/Disable histogram plotting \\

	\ahlink{set\_layout}{sd:sd.plotter.set_layout} & Set the multi-panel layout \\

	\ahlink{set\_legend}{sd:sd.plotter.set_legend} & Specify a mapping for the legend \\

	\ahlink{set\_linestyles}{sd:sd.plotter.set_linestyles} & Set the linestyles to be used \\

	\ahlink{set\_mask}{sd:sd.plotter.set_mask} & Set a plotting mask for a specific selection of the data \\

	\ahlink{set\_mode}{sd:sd.plotter.set_mode} & Set the plots look and feel \\

	\ahlink{set\_ordinate}{sd:sd.plotter.set_ordinate} & Set y-axis label of the plot \\

	\ahlink{set\_panellayout}{sd:sd.plotter.set_panellayout} & Set layout of subplots \\

	\ahlink{set\_panelling}{sd:sd.plotter.set_panelling} & Set the panelling mode \\

	\ahlink{set\_range}{sd:sd.plotter.set_range} & Set the range of interest on the abcissa of the plot \\

	\ahlink{set\_selection}{sd:sd.plotter.set_selection} & Set selection to the data \\

	\ahlink{set\_stacking}{sd:sd.plotter.set_stacking} & Set the stacking mode \\

	\ahlink{set\_title}{sd:sd.plotter.set_title} & Set the title of the plot \\

	\ahlink{text}{sd:sd.plotter.text} & Add text in a specified location \\

\end{longtable}

\newpage
\ahfunction{sd.plotter.annotate}{Annotate text at specified location}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.arrow}{Draw arrow on specified axis}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.axhline}{Draw a horizontal line}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.axhspan}{Draw a horizontal rectangle}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.axvline}{Draw a vertical line}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.axvspan}{Draw a vertical rectangle}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.create\_mask}{sd.plotter.create_mask}{Interactively define a mask}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.figtext}{Add text to figure at specified location}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.gca}{Get current axes}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.plot}{Plot a scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.plot\_lines}{sd.plotter.plot_lines}{Plot a line catalog}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.plotazel}{Plot azimuth and elevation versus time of a scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.plotpointing}{Plot telescope pointings in a scantable}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.plottp}{Plot total power data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.print\_header}{sd.plotter.print_header}{Print header of the scantable on the plot and/or logger}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.refresh}{Do a soft refresh on the plot}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.save}{Save the plot to a file}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_abcissa}{sd.plotter.set_abcissa}{Set the x-axis label of the plot}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_colors}{sd.plotter.set_colors}{Set the colors to be used}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_colours}{sd.plotter.set_colours}{Set the colors to be used}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_data}{sd.plotter.set_data}{Set a scantable to plot}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_font}{sd.plotter.set_font}{Set font properties}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_histogram}{sd.plotter.set_histogram}{Enable/Disable histogram plotting}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_layout}{sd.plotter.set_layout}{Set the multi-panel layout}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_legend}{sd.plotter.set_legend}{Specify a mapping for the legend}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_linestyles}{sd.plotter.set_linestyles}{Set the linestyles to be used}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_mask}{sd.plotter.set_mask}{Set a plotting mask for a specific selection of the data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_mode}{sd.plotter.set_mode}{Set the plots look and feel}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_ordinate}{sd.plotter.set_ordinate}{Set y-axis label of the plot}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_panellayout}{sd.plotter.set_panellayout}{Set layout of subplots}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_panelling}{sd.plotter.set_panelling}{Set the panelling mode}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_range}{sd.plotter.set_range}{Set the range of interest on the abcissa of the plot}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_selection}{sd.plotter.set_selection}{Set selection to the data}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_stacking}{sd.plotter.set_stacking}{Set the stacking mode}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.plotter.set\_title}{sd.plotter.set_title}{Set the title of the plot}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahfunction{sd.plotter.text}{Add text in a specified location}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\



%%%%% sd.coordinate
%\newpage
\ahobject{sd.coordinate}{Single-dish specific spectral coordinate conversion}
%\ahfunction{sd.coordinate}{Single-dish specific spectral coordinate conversion}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  The coordinate class is a representation of the spectral coordinate 
  (frequency axis) of the data. It handles a conversion between 
  pixel/channel values and frequency/velocity ones under the current 
  spectral coordinate.

Methods
\begin{longtable}{ll}

	\ahlink{coordinate}{sd:sd.coordinate.coordinate} & Constructor \\

	\ahlink{coordinate.get\_increment}{sd:sd.coordinate.coordinate.get_increment} & Get increment of this coordinate system \\

	\ahlink{coordinate.get\_reference\_pixel}{sd:sd.coordinate.coordinate.get_reference_pixel} & Get reference pixel of this coordinate system \\

	\ahlink{coordinate.get\_reference\_value}{sd:sd.coordinate.coordinate.get_reference_value} & Get reference value of this coordinate system \\

	\ahlink{coordinate.to\_frequency}{sd:sd.coordinate.coordinate.to_frequency} & Convert a channel/pixel value to a frequency \\

	\ahlink{coordinate.to\_pixel}{sd:sd.coordinate.coordinate.to_pixel} & Convert a frequency/velocity value to a channel/pixel  \\

	\ahlink{coordinate.to\_velocity}{sd:sd.coordinate.coordinate.to_velocity} & Convert a channel/pixel value to a velocity \\

\end{longtable}

\newpage
\ahfunction{sd.coordinate.coordinate}{Constructor}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.coordinate.coordinate.get\_increment}{sd.coordinate.coordinate.get_increment}{Get increment of this coordinate system}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.coordinate.coordinate.get\_reference\_pixel}{sd.coordinate.coordinate.get_reference_pixel}{Get reference pixel of this coordinate system}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.coordinate.coordinate.get\_reference\_value}{sd.coordinate.coordinate.get_reference_value}{Get reference value of this coordinate system}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.coordinate.coordinate.to\_frequency}{sd.coordinate.coordinate.to_frequency}{Convert a channel/pixel value to a frequency}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.coordinate.coordinate.to\_pixel}{sd.coordinate.coordinate.to_pixel}{Convert a frequency/velocity value to a channel/pixel}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.coordinate.coordinate.to\_velocity}{sd.coordinate.coordinate.to_velocity}{Convert a channel/pixel value to a velocity}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\



%%%%% sd.opacity_model
\newpage
\ahsdobject{sd.opacity\_model}{sd.opacity_model}{Single-dish specific opacity model}
%\ahobject{sd.opacity_model}{Single-dish specific opacity model}
%\ahfunction{sd.opacity_model}{Single-dish specific opacity model}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

  This class implements opacity/atmospheric brightness temperature model
  equivalent to the model available in MIRIAD. The actual math is a
  convertion of the Fortran code written by Bob Sault for MIRIAD.
  It implements a simple model of the atmosphere and Liebe's model (1985)
  of the complex refractive index of air.
    
  The model of the atmosphere is one with an exponential fall-off in
  the water vapour content (scale height of 1540 m) and a temperature
  lapse rate of 6.5 mK/m. Otherwise the atmosphere obeys the ideal gas
  equation and hydrostatic equilibrium.
  
  Note that the model includes atmospheric lines up to 800 GHz, but was not
  rigorously tested above 100 GHz and for instruments located at
  a significant elevation. For high-elevation sites it may be necessary to
  adjust scale height and lapse rate.

  The constructor takes several arguments that specifies observatory and 
  weather informations.

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\begin{tabular}{|l p{0.25in}p{0.75in}p{2.38in}|}
\hline
Inputs && \multicolumn{2}{p{3.36in}|}{}\\
temperature&& \multicolumn{2}{p{3.36in}|}{Air temperature at the observatory (K)}\\
& &allowed: & float\\
& &Default: & 288.0
\\
pressure&& \multicolumn{2}{p{3.36in}|}{Air pressure at the sea level if the observatory elevation is set to non-zero value (note, by default is set to 700m) or at the observatory ground level if the elevation is set to 0. The value is in Pascals or hPa.}\\
& &allowed: & float\\
& &Default: & 101325.0
\\
humidity&& \multicolumn{2}{p{3.36in}|}{Air humidity at the observatory (fractional)}\\
& &allowed: & float\\
& &Default: & 0.5
\\
elevation&& \multicolumn{2}{p{3.36in}|}{Observatory elevation about sea level (in meters)}\\
& &allowed: & float\\
& &Default: & 700.0
\\

\hline
\end{tabular}



Methods
\begin{longtable}{ll}

	\ahlink{get\_opacities}{sd:sd.opacity_model.get_opacities} & Get the opacity value(s) for the given frequency(ies) \\

	\ahlink{set\_observatory\_elevation}{sd:sd.opacity_model.set_observatory_elevation} & Update the model using the given observatory elevation \\

	\ahlink{set\_weather}{sd:sd.opacity_model.set_weather} & Update the model using the given environmental parameters \\

\end{longtable}

\newpage
\ahsdfunction{sd.opacity\_model.get\_opacities}{sd.opacity_model.get_opacities}{Get the opacity value(s) for the given frequency(ies)}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.opacity\_model.set\_observatory\_elevation}{sd.opacity_model.set_observatory_elevation}{Update the model using the given observatory elevation}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\

\newpage
\ahsdfunction{sd.opacity\_model.set\_weather}{sd.opacity_model.set_weather}{Update the model using the given environmental parameters}

\flushleft\vspace{.20in}\textbf {Description}\\
   \hfill \\

\flushleft\vspace{.20in}\textbf {Arguments}\\
\hfill \\
\flushleft\vspace{.20in}\textbf {Returns}\newline

\flushleft\vspace{.20in}\textbf {Example}\\
\hfill \\





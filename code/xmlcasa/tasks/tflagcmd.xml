<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
      file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="tflagcmd" category="data editing" visibility="experimental">
        <shortdescription>Flagging task based on flagging commands</shortdescription>
        <description>
        The task will select a subset of data explicitly for flagging,
        quacking, clipping, autocorrelation flagging, or flagging
        of shadowed antennas. Unflagging is also available.

        The flagging command syntax is currently defined in CAS-2405.


        </description>
        <input>
                <param type="string" name="vis" mustexist="true">
                        <description>Name of MS file to flag</description>
                        <value></value>
                </param>

                <param type="string" name="inpmode">
                        <description>Input mode for flag commands(table/file/xml/cmd)</description>
                        <value>table</value>
                        <allowed kind="enum">
                        <value>table</value>
                        <value>file</value>
                        <value>cmd</value>
                        <value>xml</value>
                        </allowed>
                </param>

                <param type="string" name="inpfile" subparam="true">
                        <description>Name of flag command file to input</description>
                        <value></value>
                </param>
                <param type="intArray" name="tablerows" subparam="true">
                        <description>Rows of inpfile to read</description>
                        <value type="vector"></value>
                </param>
                <param type="any" name="reason" subparam="true">
                        <description>Select by REASON types</description>
                        <any type="variant" limittypes="string stringArray"/>
                        <value type="string">any</value>
                </param>
                <param type="bool" name="useapplied" subparam="true">
                        <description>Select commands whose rows have APPLIED column set to True</description>
                        <value>False</value>
                </param>

                <param type="any" name="command" subparam="true">
                        <description>flag command(s) as a list of strings</description>
                        <any type="variant" limittypes="string stringArray"/>
                        <value type="string"></value>
                </param>

                <param type="double" name="tbuff" subparam="true">
                        <description>Time buffer (sec) to pad flags</description>
                        <value>1.0</value>
                </param>

                <param type="string" name="ants" subparam="true">
                        <description>Allowed flag antenna names to select by</description>
                        <value></value>
                </param>

                <param type="string" name="action">
                        <description>Action to perform in MS and/or in inpfile (apply/unapply/list/plot/clear/extract)</description>
                        <value>list</value>
                        <allowed kind="enum">
                        <value>apply</value>
                        <value>unapply</value>
                        <value>list</value>
                        <value>plot</value>
                        <value>clear</value>
                        <value>extract</value>
                        </allowed>
                </param>

                <param type="bool" name="flagbackup" subparam="true">
                        <description>Automatically backup the FLAG column before execution</description>
                        <value>False</value>
                </param>

                <param type="bool" name="clearall" subparam="true">
                        <description>Delete all rows from FLAG_CMD</description>
                        <value>False</value>
                </param>

                <param type="intArray" name="rowlist" subparam="true">
                        <description>FLAG_CMD rows to clear</description>
                        <value type="vector"></value>
                </param>

            <param type="string" name="plotfile" subparam="true">
                    <description>Name of output file to save plot</description>
                    <value></value>
            </param>

            <param type="bool" name="sequential">
                <description>Run the task in sequential or in parallel.</description>
                <value>False</value>
            </param>

            <param type="bool" name="savepars">
                <description>Save flag commands to the MS or to a file</description>
                <value>False</value>
            </param>
            <param type="string" name="outfile" subparam="true">
                    <description>Name of output file to save commands</description>
                    <value></value>
            </param>


                <constraints>
                    <when param="inpmode">
                            <equals value="table">
                                    <default param="inpfile"><value type="string"></value></default>
                                    <default param="tablerows"><value type="vector"></value></default>
                                    <default param="reason"><value type="string">any</value></default>
                                    <default param="useapplied"><value type="bool">False</value></default>
                            </equals>
                            <equals value="file">
                                    <default param="inpfile"><value type="string"></value></default>
                                    <default param="reason"><value type="string">any</value></default>
                            </equals>
                            <equals value="cmd">
                                    <default param="command"><value>['']</value></default>
                            </equals>
                            <equals value="xml">
                                    <default param="tbuff"><value>1.0</value></default>
                                    <default param="ants"><value type="string"></value></default>
                                    <default param="reason"><value type="string">any</value></default>
                            </equals>
                    </when>

                    <when param="action">
                            <equals value="list"></equals>
                            <equals value="apply">
                                    <default param="flagbackup"><value>False</value></default>
                            </equals>
                            <equals value="unapply">
                                    <default param="flagbackup"><value>False</value></default>
                            </equals>
                            <equals value="plot">
                                    <default param="plotfile"><value type="string"></value></default>
                            </equals>
                            <equals value="clear">
                                    <default param="clearall"><value>False</value></default>
                                    <default param="rowlist"><value type="vector"></value></default>
                            </equals>
                    </when>
                                        
                    <when param="savepars">
                        <equals type="bool" value="False" />
                        <equals type="bool" value="True">
                            <default param="outfile"><value type="string"></value></default>
                        </equals>
                    </when>
                    
                </constraints>
        </input>
<returns type="void"/>

<example>
        The task will select a subset of data explicitly for flagging
        using the modes and parameters defined in the task tflagger. 
        The available modes are: manual, clip, shadow, quack, elevation,
        tfcrop, extend and unflag.
        
        This task is equivalent to the corresponding parts of
        tflagger, but works from a series of flagging commands
        specified by the "inpfile" parameter, which can refer to
        an ASCII file, a FLAG_CMD table or Flag.xml table in the MS, 
        or directly input the flagging commands as a list of strings.

        If flagbackup=True, the current flags are backed up before applying 
        new flags. Previous flag versions can be recovered using the 
        flagmanager task.

        The tflagcmd task will flag data based on the commands input on inpmode :
            table = input from FLAG_CMD table in MS
            file  = input from flagging command file "inpfile"
            cmd   = input from "command" list of strings
            xml   = input from Flag.xml in the MS given by vis

        The flags stored in the MS are automatically backed up before each run,
        unless flagbackup = False.

        Keyword arguments:
        vis -- Name of input visibility file
                default: none example: vis='ngc5921.ms'

        inpmode -- Input mode for flags
                options: 'table','file','cmd','xml'
                default: 'table'

           inpmode "table" --  input commands from FLAG_CMD table of MS
       
              inpfile -- path to MS containing FLAG_CMD
                   default: '' (read from FLAG_CMD table in vis)

                   Main use is to read flags from internal FLAG_CMD,
                   but by setting inpfile to a different MS you can 
                   use this to copy the flags from one MS to another.

              tablerows -- list of rows of the FLAG_CMD table to read
                   default: [] (read all rows)
                   example: [0,1,2,10]

                   NOTE: currently only takes integer lists, not
                   parseable strings with ranges.  Use the Python
                   range function to generate ranges, e.g.
                      tablerows = range(0,30) + range(50,55)
                   instead of '0~29,50~54' for now.
       
              reason -- select flag commands based on REASON(s) 
                   default: '' (all flags regardless of reason)
                            can be a string, or list of strings
                   example: reason='FOCUS_ERROR'
                            reason=['FOCUS_ERROR','SUBREFLECTOR_ERROR']

                   NOTE: what is within the string is literally
                   mateched, e.g. reason='' matches only blank reasons, 
                   and reason = 'FOCUS_ERROR,SUBREFLECTOR_ERROR'
                   matches this compound reason string only

              useapplied -- select the flag commands of rows that have APPLIED=True
                   options: True,False
                   default: False   

                   If useapplied=True it will read in both applied and
                   unapplied flags

           inpmode "file" --  input commands from ASCII file
       
              inpfile -- name of ASCII flagging command file
                   default: '' (read from FlagCMD.txt in MS)

              reason -- select flag commands based on REASON(s) 
                   default: '' (all flags regardless of reason)
                            can be a string, or list of strings
                   example: reason='FOCUS_ERROR'
                            reason=['FOCUS_ERROR','SUBREFLECTOR_ERROR']

                   NOTE: what is within the string is literally
                   mateched, e.g. reason='' matches only blank reasons, 
                   and reason = 'FOCUS_ERROR,SUBREFLECTOR_ERROR'
                   matches this compound reason string only
       
           inpmode "cmd" -- input commands via list of strings
       
              command -- list of command strings
                   default: ['']
       
           inpmode "xml" -- input online flags from Flag.xml file in the MS
       
              tbuff -- (float) time padding buffer (seconds, default=1.0)
       
              ants -- select flags based on antenna, 
                        e.g. antenna='ea01'
                   default: '' (all flags regardless of antenna)
       
              reason -- select flag commands based on REASON(s), 
                   default: 'Any' (all flags regardless of reason)
                            can be a string, or list of strings
                   example: reason='FOCUS_ERROR'
                            reason=['FOCUS_ERROR','SUBREFLECTOR_ERROR']

                   NOTE: what is within the string is literally
                   mateched, e.g. reason='' matches only blank reasons, 
                   and reason = 'FOCUS_ERROR,SUBREFLECTOR_ERROR'
                   matches this compound reason string only

        action -- operation to perform on MS and/or in flag commands from inpfile
                options: 'apply','clear','list','plot','unapply','extract'
                default: 'apply'

           action "apply" --  apply flags to MS
       
              This operation will apply the commands chosen by inpmode.       
              If inpmode='table' it will set the APPLIED column to True.
              
              flagbackup -- Automatically backup MS FLAG column before applying?
                   options: True,False
                   default: False

       
           action "unapply" --  unapply flags in MS

              This operation will unapply the commands chosen by inpmode.
              If inpmode='table' it will set the APPLIED column to False. 
              
              IMPORTANT: In order to guarantee that only the data selected in 
              the command is unapplied, the framework will first unapply the selected
              rows and then re-apply the overlapping data that got unapplied in the
              first pass. This is a true unapply action, but it will take longer to
              process because it will re-apply all the remaining commands that have
              APPLIED = True!
       
              flagbackup -- Automatically backup MS FLAG column before unapplying?
                   options: True,False
                   default: True


           action "list" --  list and/or save flag commands

              This operation will list the commands chosen by inpmode on the screen
              and save them to the MS or to a file without applying. It will save the commands
              to outfile if the parameter savepars is set to True. If outfile is None, it
              will save the commands to the MS given in vis.


           action "plot" --  plot flags (ant vs time)

              This operation will plot the flags chosen by inpmode to a 
              matplotlib gui or to a file.  These will be sorted by
              antenna vs. time.  Most useful for showing the online
              flags.

              outfile -- output plot file
                   default: '' (plot to matplotlib window)

                   WARNING: will only reliably plot individual flags
                   per antenna and timerange (e.g. direct from xml)
       
           action "clear" --  clear flags from FLAG_CMD in vis

              This operation will delete the selected flag rows from
              the internal FLAG_CMD table of the MS.

              NOTE: choosing this option will disregard anything you
              set in inpmode and will always work on the FLAG_CMD table
              in vis

              clearall -- really clear all flags?
                   default: False (will not clear)

              rowlist -- list of FLAG_CMD rows to clear
                   default: [] (all flags in table)
                   example: [0,1,2,10]

                   NOTE: currently only takes integer lists, not
                   parseable strings with ranges.  Use the Python
                   range function to generate ranges, e.g.
                      rowlist = range(0,30) + range(50,55)
                   instead of '0~29,50~54' for now.
       
              WARNING: this can be dangerous, and you must set clearall=True 
              to use this!!! This will delete the specified rows from the 
              internal FLAG_CMD table for vis regardless of what mode is set
              to (useful for when you import from xml or file, and decide to 
              redo it). This action will NOT unapply the commands.


           action "extract" -- extract internal flag dictionary

              This option will return the internal flagging dictionary to
              python.


        sequential -- Run the task in sequential or in parallel. If you want to preserve the
                      order in which the commands appear in the list, set sequential to True.
                      When set to False, the framework will run the commands in parallel for
                      optimization.
                default: False
                option: False/True

        savepars -- Save the flag commands to the FLAG_CMD table of the MS or to an output text file.
                default: False
                options: True/False
                
                outfile -- Name of output file to save the flag commands.
                    default: ' '; it will save the commands in the FLAG_CMD table of the MS.
                    example: outfile='flags.txt' will save the parameters in a text file.

     ===========================================================================

     -- Internal FLAG_CMD input inpmode useage --

        (For mode='table')

        It is a good idea to use action='list' first to see what is there
        before doing anything else, e.g.
        
          inpmode = 'table'
          action = 'list'

        To apply the flags stored in the FLAG_CMD table in the MS,
        simply set inpmode='table' and action='apply', e.g.

          inpmode = 'table'
          action = 'apply'
          useapplied = False

        This is the default setup of tflagcmd

        To merely save to FLAG_CMD but not apply, then
        
          inpmode = 'table'
          inpfile = 'other.ms'
          action = 'list'
          
        To save commands from a file into the MS without applying
        
          inpmode = 'file'
          inpfile = 'flags.txt'
          action = 'list'

        If you need to select only certain rows from the FLAG_CMD table,
        use the tablerows parameter to control this.  Currently this must
        be a list of individual row numbers (0-based), e.g.

          tablerows = [0,1,2,3,10,11]

        or

          tablerows = range(29)

        NOTE: the useapplied=True/False tag is important if you are
        going to (re)apply flags marked as APPLIED True in FLAG_CMD. 
        It is common to have a "failed" flagging operation mark the flags
        as already applied and then they don't show up when you re-run
        (e.g. in 'list').  Set useapplied=True so that it will use these
        anyway.

     -- Online flag input inpmode useage --

        (For inpmode='xml')

        To list the online flags stored in the Flag.xml file in the
        MS, simply set:

          inpmode = 'xml'
          action = 'list'
          savepars = False

        It is then straightforward to save these to FLAG_CMD

          inpmode = 'xml'
          action = 'list'
          savepars = True

        To directly apply the online flags stored in the Flag.xml file in the
        MS, set inpmode='xml' and desired buffer, e.g.

          inpmode = 'xml'
          tbuff = 1.0    # pad flag times by 1 sec
          action = 'apply'
          set savepars to save or not the commands in the MS

        You can also specify a set of reasons (a comma separated list)
        for flags to apply, e.g.
        
          reason = 'FOCUS_ERROR,SUBREFLECTOR_ERROR'   # select these flags
          reason = 'ANTENNA_NOT_ON_SOURCE'

        NOTE: The online flag time buffer tbuff is specified in
        seconds, but in fact should be keyed to the intrinsic online 
        integration time.  This is particularly true for EVLA data,
        were a tbuff value of 0.5x to 1.5x the integration time is
        needed (currently you should use 1.5x for data taken in
        early 2011 or before).

        Because the Flag.xml is copied to the MS by importevla,
        you can re-apply the online flags with an increased tbuff
        simply by running with inpmode='xml' and optype='apply', e.g.

          inpmode = 'xml'
          tbuff = 15.0    # pad flag times by 15 sec for 10sec integrations
          optype = 'apply'

        if you originally used a smaller value (e.g. 1.0) by mistake
        or you want to try longer values.  Note these will be added to
        the FLAG_CMD table which you would have to clean up manually
        if you care about this.

     -- Flag command useage --

        (For inpmode='file' and inpmode='cmd')

        For example, a series of commands might be:

          antenna='ea01' timerange='00:00:00~01:00:00'
          antenna='ea11' timerange='00:00:00~03:00:00' spw='0~4'
          mode='clip' clipminmax=[0,5] correlation='ABS_ALL'
          mode='quack' quackmode='end' quackinterval=1.0
          mode='shadow'

        Any other mode can also use selection (see the help of tflagger):

          mode='shadow' antenna='ea01,ea02,ea03'
          mode='quack' quackmode='end' quackinterval=1.0 antenna='ea22'

        These commands can be in an ASCII file, e.g. "myflags.txt"
        and input using inpmode='file', e.g.

          tflagcmd(vis='myvis.ms',inpmode='file',inpfile='myflags.txt')

        or input from the interface

          tflagcmd(vis='myvis.ms',inpmode='cmd',
                  command=["mode='shadow'",
                           "mode='clip' clipminmax=[0,5] correlation='ABS_ALL'",
                           "mode='quack' quackmode='end' quackinterval=1.0",
                           "antenna='ea01' timerange='00:00:00~01:00:00'",
                           "antenna='ea11' timerange='00:00:00~03:00:00' spw='0~4'"])

     -- ACTIONs --

        The action parameter controls what tflagcmd will actually do with the
        commands:

        * action = 'apply'

          This will apply the selected commands to the data.
          
          If inpmode='table' and inpfile='' then the APPLIED column in FLAG_CMD
          will be set to True.

        * action = 'unapply'

          This will effectively unapply any commands on the selected data.

        * action = 'list'

          List what is selected and or save in the MS or in a file. It is wise to do 
          this first before doing any other action. It will list the output in the logger 
          and save them to the FLAG_CMD table of the MS or to a file if outfile is non-blank.

        * action = 'plot'

          Will pop up a little matplotlib GUI (if outfile='') or plot to a
          file.  Currently only gives an antenna vs time plot, mostly useful
          for looking at the online flags.

        * action = 'clear'
          
          DANGER! This can be used to totally delete rows from the FLAG_CMD
          table. It ignores what inpmode is pointing to and always works
          on FLAG_CMD.  Use at your own peril but sometimes you need to just
          blow that table away, e.g.

            vis = msfile
            optype = 'clear'
            rowlist = []          # all rows
            clearall = True       # disarm the safety
          
          Note you have to explicitly set clearall=True to arm the deletion
          (a minimal precaution).

        * action = 'extract'

          This option will return the internal flagging dictionary to
          python.  This will allow a power-user to manipulate these
          commands directly (e.g. for plotting etc.).  For example,

          myflagd = tflagcmd(vis=msfile,useapplied=True,action='extract')

          will extract all the commands (including those already applied)
          in the FLAG_CMD MS table.

          NOTE: There is no extant description of the format of this
          dictionary, as it is an internal device used by the tflagcmd
          task. This action is provided for the convenience of
          advanced users.


     ------- FLAG COMMAND SYNTAX -------

        The command syntax is based on the tflagger parameters.

        Basic Syntax Rules
        
          Commands are a string (which may contain internal "strings") consisting of
          KEY=VALUE pairs separated by whitespace (see examples below). 

          NOTE: There should be no whitespace between KEY=VALUE or within each KEY or 
          VALUE, since the simple parser first breaks command lines on whitespace, 
          then on "=". 
        
          Each key should only appear once on a given command line/string
        
          There is an implicit "mode" for each command, with the default
          being 'manual' if not given.

          Comment lines can start with '#' and will be ignored.
          Parts of a command line after a ' # ' token are also ignored.
        
        
        1. Data selection parameters (used by all flagging modes)
        
          timerange=''
          antenna=''
          spw=''
          correlation=''
          field=''
          scan=''
          feed=''
          array=''
          uvrange=''
          intent=''
          observation=''
        
          Note: a command consisting only of selection key-value pairs is a 
          basic "manual" operation, ie. flag the data meeting the selection
          
        
        2. Modes specific parameters with default values (for further details, refer to the task tflagger).
          
          2.1 Mode clip.
              correlation='ABS_ALL'
              datacolumn='DATA'
              clipminmax=[]  
              clipoutside=True
              channelavg=False  
              
          2.2 Mode shadow.
              diameter=-1
              
          2.3 Mode quack.
              quackinterval=0.0     
              quackmode='beg' 
              quackincrement=False
              
          2.4 Mode elevation.
              lowerlimit=0.0
              upperlimit=90.0
              
          2.5 Mode tfcrop.
              ntime='scan'
              combinescans=False
              correlation='ABS_ALL'
              datacolumn='DATA' 
              timecutoff=4.0 
              freqcutoff=3.0
              timefit='line'
              freqfit='poly'
              maxnpieces=7 
              flagdimension='freqtime' 
              usewindowstats='none'
              halfwin=1 
         
          2.6 Mode extend.
              ntime='scan'
              combinescans=False
              extendpols=False
              growtime=50.0
              growfreq=50.0
              growaround=True
              flagneartime=False
              flagnearfreq=False
              
          2.7 Mode unflag.
          2.8 Mode manual.
              
              
        3. Basic elaboration options for online and interface use
        
          id=''              # flag ID tag (not necessary)
          reason=''          # reason string for flag
          flagtime=''        # a timestamp for when this flag was generated (for 
                               user history use)
        
                               NOTE: there is no flagtime column in FLAG_CMD at
                               this time, but we will propose to add this as an
                               optional column

           NOTE: These are currently ignored and not used
        
        4. Extended elaboration options for online and interface use 
           Note: these are FLAG_CMD columns, but their use is not clear but included
           here for compatibility and future expansion
        
          level=N            # flagging "level" for flags with same reason
          severity=N         # Severity code for the flag, on a scale of 0-10 in order 
                               of increasing severity; user specified
        

</example>
</task>
</casaxml>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>

<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


<!-- Copyright (C) 2008                                                -->
<!-- Associated Universities, Inc. Washington DC, USA.                 -->
<!--                                                                   -->
<!-- This library is free software; you can redistribute it and/or     -->
<!-- modify it under the terms of the GNU Library General Public       -->
<!-- License as published by the Free Software Foundation; either      -->
<!-- version 2 of the License, or (at your option) any later version.  -->
<!--                                                                   -->
<!-- This library is distributed in the hope that it will be useful,   -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of    -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU -->
<!-- Library General Public License for more details.                  -->
<!--                                                                   -->
<!-- You should have received a copy of the GNU Library General Public -->
<!-- License along with this library; if not, write to the Free        -->
<!-- Software Foundation,Inc.,675 Massachusetts Ave,Cambridge, MA 02139, USA.-->
<!--                                                                   -->
<!-- Correspondence concerning AIPS++ should be adressed as follows:   -->
<!--        Internet email: aips2-request@nrao.edu.                    -->
<!--        Postal address: AIPS++ Project Office                      -->
<!--                        National Radio Astronomy Observatory       -->
<!--                        520 Edgemont Road                          -->
<!--                        Charlottesville, VA 22903-2475 USA         -->
<!-- ***************************************************************** --> 
<!-- ***************************************************************** --> 
<!-- This is the param set the imhead task                             -->
<!-- This is similar to the AIPS imhead, gethead, and puthead          -->
<!-- This does the equivalent of                                       -->
<!-- ia.open('anyfile.im');                                            -->
<!-- ia.summary();                       # summary mode                -->
<!-- tb.open('anyfile.im',nomodify=False)                              -->
<!-- tb.getcolkeywords()                                               -->
<!-- Extraction of all header            # list mode                   -->
<!-- List history contents (ia.history)  # history mode                -->
<!-- Add a new keyword or coordinate     # add mode                    -->
<!-- tb.putcolkeywords(value=newValue)   # put mode                    -->
<!-- Delete a new keyword or coordinate  # del mode                    -->
<!-- print/return( value )               # get mode                    -->
<!-- ***************************************************************** --> 
<!-- ***************************************************************** --> 
<!-- See task_imhead.py for detailed description of the                -->
<!-- imhead task.                                                      -->
<!-- ***************************************************************** --> 
<!-- ***************************************************************** --> 

<task type="function" name="imhead">

<shortdescription>List, get and put image header parameters</shortdescription>


<input>
    <param type="string" name="imagename" mustexist="true" >
    	<description>Name of the input image</description>
    	<value></value>
        <example>imagenam='ngc5921_task.image'</example>
    </param>

    <param type="string" name="mode" >
	<description>imhead options: list, get, put, summary</description>
	<allowed kind="enum">
	    <value>list</value>
            <value>fits</value>
            <value>history</value>
	    <value>get</value>
	    <value>put</value>
	    <value>add</value>
	    <value>del</value>
	    <value>summary</value>
    	</allowed>
        <value>summary</value>
    </param>

    <param type="string" name="hdkey" subparam="yes">
    	<description>The FITS keyword</description>
        <value></value>
        <example>hdkey'telescope'</example>
    </param>

    <param type="any" name="hdvalue" subparam="yes">
	<any type="variant"/>
    	<description>Value of hdkey)</description>
        <value type="string"></value>
        <example>hdvalue='VLA'</example>
    </param>

    <param type="string" name="hdtype" subparam="yes">
    	<description>Data type of the header keyword.</description>
	<allowed kind="enum">
	    <value>bool</value>
            <value>int</value>
            <value>string</value>
	    <value>double</value>
	    <value>complex</value>
            <value></value>
    	</allowed>
        <value></value>
        <example>hdkey='telescope'</example>
    </param>

    <param type="string" name="hdcomment" subparam="yes">
    	<description>Comment associated with the header keyword</description>
        <value type="string"></value>
        <example>hdvalue='VLA'</example>
    </param>


    <constraints>
	<when param="mode">
  	    <equals value="summary"/>
  	    <equals value="list"/>
  	    <equals value="history"/>
  	    <equals value="fits"/>

	    <equals value="put">
		<default param="hdkey"><value type="string"></value></default>
		<default param="hdvalue"><value type="string"></value></default>
		<default param="hdtype"><value type="string"></value></default>
		<default param="hdcomment"><value type="string"></value></default>	    </equals>

	    <equals value="add">
		<default param="hdkey"><value type="string"></value></default>
		<default param="hdvalue"><value type="string"></value></default>
		<default param="hdtype"><value type="string"></value></default>
		<default param="hdcomment"><value type="string"></value></default>
	    </equals>

	    <equals value="get">
		<default param="hdkey"><value type="string"></value></default>
	    </equals>

	    <equals value="del">
		<default param="hdkey"><value type="string"></value></default>
	    </equals>
	</when>
    </constraints>
</input>

<returns type="variant" limittypes="string double void" />

<example>

Lists the header values associated with an image.  Specified
header variables can be obtained (get) and changed (put).

This task is similar to the AIPS verbs imhead, gethead, and
puthead. 
	
Common Header Items:
	beammaj		Major axis of the clean beam
        beammin         Minor axis of the clean beam
        beampa          Position angle of the clean beam
	bunit		Image pixel units (K, Jy/beam, etc)
	cdeltn		Pixel size, nth axis  (max n is 4)
	crpixn		Pixel coordinate of reference point, nth axis
	crvaln		Pixel location of reference point, nth axis
	ctypen		Axis name, nth axis
	cunitn		Pixel units, nth axis
	date-obs	Date of the observation
	equinox         Reference frame for directional coordinates
        reffreqtype     Reference frame for the spectral coordinates
        imtype          Image type: intensity, 
        max             Maximum pixel value in image
        min             Minimum pixel value in image
	object		Source name
	observer	Observer name
	projection	Image projection ('SIN','TAN', or 'ZEA')
	restfrequency	Rest Frequency
	telescope	Telescope name

Keyword arguments:
imagename -- Name of input image
	default: none; example: imagename='ngc5921_task.image'
mode -- Mode: options: 'list', 'summary', 'fits', 'history', 'get', 
                       'put', 'add', and 'del'
           'summary' Information summarizing the CASA image file.
	   'list'    lists the CASA image header keywords and values.  This
                     has more information than 'summary' and should be used
                     if 'get' and 'put' are executed. The information is
                     written to the terminal unless the returned value 
                     is stored in a variable, results = imhead(...)
           'fits'    Lists the header information in a FITS style
	   'summary' lists brief header information on the logger
           'history' Display the history information in hte CASA logger.
           'get'     Retrieve the value, units if applicable, comments
                     for a the header key, hdkey. The information is
                     written to the terminal unless the returned value 
                     is stored in a variable, results = imhead(...)
	   'put'     Changes the value of the header item (keyword), 
                     to the value given by hdvalue.
	   'add'     Adds a new header key, hdkey, to the header.  The
                     value of this header item will be set to the value of
                     hdvalue, which may be empty.
	   'del'     Delete/remove a header key, hdkey, form the header. 
                     Note that the user is prevented from removing 
                     required keywords.
hdkey -- Header keyword to get, put, add, or del
	default: none; example: hdkey='telescope'
hdtype -- Data type that is to be used to store the Header Key, hdkey
          on disk.  This parameter is to be used with the 'add' mode
          only.  It can not be used to change the data type of a keyword.
        options: bool, int, string, doubple, complex
        default: none; example hdtype='double'
hdvalue -- Value of header key to get, put, or add.            
	default: ''; example: hdvalue='VLA'
	Examples: 
		  hdkey='date-obs';hdvalue='2007/06/20/00:00:00'
		  hdkey='beammajor';hdvalue='55arcsec'
                  hdkey='beampa'';hdvalue='0deg'
		  hdkey='restfrequency';hdvalue='1.421GHz'
		  hdkey='restfrequency';hdvalue='1.421GHz, 115.272GHz'
		  hdkey='projection';hdvalue='TAN'
		  hdkey='cdelt4';hdvalue=24415.05
		  hdkey='cdelt1';hdvalue='7.75e-5deg'
		  hdkey='crval1';hdvalue=qa.quantity( '763180', 'arsec')
		  hdkey='crval1';hdvalue='14:07:58'
		  hdkey='crval4';hdvalue='6250000Hz'

        Note that for the crval and cdelt hdkey values a variety of inputs
        which includes strings with units, CASA quanta (see the quanta tool
        for more information), and numeric values.  When numeric values are
        given, or strings with no units the unit value is assumed to be the
        same as the units used internally, which is radians for directional
        axes, and Hz for spectral axes.

        Example to get the clean beam from one image and put it in a second image

           Get the clean beam from image1 into hdvalue
                imagename = 'image1.im'; mode = 'get'; hdkey = 'beam'
                hdvalue = imhead()
                print hdvalue   #  to see values

           To then put the clean beam into image2
                imagename = 'image2.im', mode = 'put'; imhead()



******   NOTE: The changes made by imhead are in the specified  *****
******             CASA IMAGE file, and NOT a FITS file.        *****
</example>

</task>

</casaxml>


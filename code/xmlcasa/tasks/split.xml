<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="split">
<description>
Split is the general purpose program to make a new data set
that is a subset of an existing data set.   Only one of the
datacolumns can be split, and it is usually, but not necessarily,
the corrected column.

Split is often used after the initial calibration of the data
to remove those sources which need additional flagging,
imaging and selfcalibration.
The data can be averaged over specified frequency channels of the
input data set.  Time averaging is also available.  However, it is
not yet possible to both time average and frequency average a data set.
</description>
<input>
	<param type="string" name="vis" mustexist="true">
		<description>Nome of input visibility file</description>
		<value></value>
	</param>

	<param type="string" name="outputvis" mustexist="false">
		<description>Name of output visibility file</description>
		<value></value>
	</param>

	<param type="string" name="datacolumn">
		<description>Which data column to split out</description>
		<value>corrected</value>
		<allowed kind="enum">
			<value>data</value>
			<value>corrected</value>
			<value>model</value>
                        <value>all</value>
		</allowed>
	</param>

        <param type="any" name="field">
                <description>Select field using field id(s) or field name(s)</description>
		<any type="variant" limittypes="string stringArray int intArray"/>
                <value type="string"></value>
        </param>

	<param type="any" name="spw">
		<description>Select spectral window/channels</description>
		<any type="variant" limittypes="string stringArray int intArray"/>
		<value type="string"></value>
	</param>

	<param type="any" name="width">
	  <description>Number of channels to average to form one output channel</description>
         <any type="variant" limittypes="string stringArray int intArray"/>
	 <value type="int">1</value>
	</param>

	<param type="any" name="antenna">
		<description>Select data based on antenna/baseline</description>
		<any type="variant" limittypes="string stringArray int intArray"/>
		<value type="string"></value>
	</param>

	<param type="string" name="timebin">
		<description>Value for timeaveraging</description>		
		<value type="string">0s</value>
	</param>

	<param type="string" name="timerange" >
		<description>Select data based on time range</description>
		<value></value>
	</param>
	<param type="string" name="scan" >
		<description>select data based on scan numbers</description>
		<value></value>
	</param>
	<param type="string" name="uvrange" >
		<description>select data based on uv distance range</description>
		<value></value>
	</param>

</input>
<example>

        Create a visibility subset from an existing visibility set:

        Split is the general purpose program to make a new data set
	that is a subset of an existing data set.   Only one of the
	datacolumns can be split, and it is usually, but not necessarily,
	the corrected column.
	
        Split is often used after the initial calibration of the data
        to remove those sources which need additional flagging,
        imaging and selfcalibration.

        The data can be averaged over specified frequency channels of the
	input data set.  Time averaging is also available.  However, it is
	not yet possible to both time average and frequency average a data set.

        Keyword arguments:
        vis -- Name of input visibility file
                default: none; example: vis='ngc5921.ms'
        outputvis -- Name of output visibility file
                default: none; example: outputvis='ngc5921_src.ms'

        datacolumn -- Which data column to split out
                default='corrected'; example: datacolumn='data'
                Options: 'data', 'corrected', 'model'
        --- Data Selection (see help par.selectdata for more detailed information)

        field -- Select field using field id(s) or field name(s).
                  [run listobs to obtain the list id's or names]
               default: ''=all fields
               If field string is a non-negative integer, it is assumed a field index
                 otherwise, it is assumed a field name
               field='0~2'; field ids 0,1,2
               field='0,4,5~7'; field ids 0,4,5,6,7
               field='3C286,3C295'; field named 3C286 adn 3C295
               field = '3,4C*'; field id 3, all names starting with 4C
        spw -- Select spectral window/channels
               default: ''=all spectral windows and channels
               spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
               spw='&lt;2';  spectral windows less than 2 (i.e. 0,1)
               spw='0:5~61'; spw 0, channels 5 to 61
               spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45.
               spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each.
               spw = '*:3~64'  channels 3 through 64 for all sp id's
                       spw = ' :3~64' will NOT work.
               spw = '*:0;60~63'  channel 0 and channels 60,61,62,63 for all IF's 
                      ';' needed to separate different channel ranges in one spw
               spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60
               spw='0:0~10,1:20~30,2:1;2;4'; spw 0, channels 0-10,
                        spw 1, channels 20-30, and spw 2, channels, 1,2 and 
	width -- Defines the number of channel to average to form the one
	         output channel.
		 default: '1' =&gt; no channel averaging
		 example: width=[2,3] =&gt; average 2 channels of 1st
		          spectral window selected and 3 in the second one.
        antenna -- Select data based on antenna/baseline
               default: '' (all)
               If antenna string is a non-negative integer, it is assumed an antenna index
                 otherwise, it is assumed as an antenna name
               antenna='5&amp;6'; baseline between antenna index 5 and index 6.
               antenna='VA05&amp;VA06'; baseline between VLA antenna 5 and 6.
               antenna='5&amp;6;7&amp;8'; baseline 5-6 and 7-8
               antenna='5'; all baselines with antenna 5
               antenna='5,6,10'; all baselines with antennas 5 and 6
        timebin -- Value for time averaging.
                default='0s' (no averaging); example: timebin='30s'
                example '10' means '10s' 
        timerange  -- Select data based on time range:
               default = '' (all); examples,
               timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
               Note: if YYYY/MM/DD is missing date, defaults to first day in data set
               timerange='09:14:0~09:54:0' picks 40 min on first day
               timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on next day
               timerange='09:44:00' data within one integration of time
               timerange='&gt;10:24:00' data after this time
	uvrange -- Select data within uvrange (default units meters)
            default: ''=all; example:
            uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda
            uvrange='&gt;4klambda';uvranges greater than 4 kilo-lambda
            uvrange='0~1000km'; uvrange in kilometers
	scan -- Scan number range
            default: ''=all

</example> 
</task>
</casaxml>

<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet type="text/xsl" ?>

<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


<tool name="calanalysis" module="calanalysis">

<!-- *********************************************************************** -->
<!-- *********************************************************************** -->

<shortdescription>
Obtain calibration data and statistics.
</shortdescription>

<code>
  <include>xmlcasa/calanalysis/calanalysis_forward.h</include>
  <private>#include &lt;xmlcasa/calanalysis/calanalysis_private.h&gt;</private>
</code>
       
<description>
{\tt calanalysis} is a tool for obtaining data and statistics from calibration
tables.  Supported types:\n
   G = gain\n
   B = bandpass\n
   M = baseline-based gain\n
   MF= baseline-based bandpass\n
   P = parallactic angle\n
   T = troposphere\n
   K = baseline-based fringe fit
</description>

<!-- *********************************************************************** -->
<!-- *********************************************************************** -->

<method type="constructor" name="calanalysis">

<shortdescription>
Construct a calanalysis tool.
</shortdescription>
   
<description>
Construct a {\tt calanalysis} tool.
</description>

<returns type="calanalysisobject">
  <shortdescription>calanalysis tool</shortdescription>
</returns>

<example>
ca = calanalysis()
del ca
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="open">

<shortdescription>
Open a calanalysis tool.  Supported types:\n
   G = gain\n
   B = bandpass\n
   M = baseline-based gain\n
   MF= baseline-based bandpass\n
   P = parallactic angle\n
   T = troposphere\n
   K = baseline-based fringe fit
</shortdescription>

<description>
Open a {\tt calanalysis} tool.  Supported types:\n
   G = gain\n
   B = bandpass\n
   M = baseline-based gain\n
   MF= baseline-based bandpass\n
   P = parallactic angle\n
   T = troposphere\n
   K = baseline-based fringe fit
</description>

<input>
  <param type="string" name="caltable">
    <description>Calibration table name</description>
    <value></value>
  </param>
</input>

<returns type="bool">
  <shortdescription>True, if successful</shortdescription>
</returns>

<example>
{\tt
ca = calanalysis()
ca.open( '{caltable name}' )
ca.close()
del ca
}
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="close">

<shortdescription>
Close the calanalysis tool.
</shortdescription>

<description>
Close the {\tt calanalysis} tool.
</description>

<returns type="bool">
  <shortdescription>True</shortdescription>
</returns>

<example>
ca = calanalysis()
ca.open( '{caltable name}' )
ca.close()
del ca
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="caltable">

<shortdescription>
Get calibration table name.
</shortdescription>

<description>
Get calibration table name.
</description>

<returns type="string">
  <shortdescription>Calibration table name</shortdescription>
</returns>

<example>
ca = calanalysis()
ca.open( '{caltable name}' )
caltable = ca.caltable()
ca.close()
del ca
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="coltype">

<shortdescription>
Get PARAM and PARAMERR column type in the calibration table.
</shortdescription>

<description>
Get PARAM and PARAMERR column type in the calibration table.
</description>

<returns type="string">
  <shortdescription>Column type</shortdescription>
</returns>

<example>
ca = calanalysis()
ca.open( '{caltable name}' )
coltype = ca.coltype()
ca.close()
del ca
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="polbasis">

<shortdescription>
Get polarization basis in the calibration table.
</shortdescription>

<description>
Get polarization basis in the calibration table.
</description>

<returns type="string">
  <shortdescription>Polarization basis</shortdescription>
</returns>

<example>
ca = calanalysis()
ca.open( '{caltable name}' )
polbasis = ca.polbasis()
ca.close()
del ca
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="get">

<shortdescription>
Get calibration data.  NB: The final calibration selection code has not been
implemented yet, so desired input parameter lists and ranges must be entered
manually.
</shortdescription>

<description>
Get calibration data.  NB: The final calibration selection code has not been
implemented yet, so desired input parameter lists and ranges must be entered
manually.
</description>

<input>

  <param type="stringArray" name="field">
    <description>
      Field IDs.  NB: Use only the numbers, not the names.
    </description>
    <value></value>
  </param>

  <param type="stringArray" name="antenna1">
    <description>
      Antenna 1s.  NB: Use only the numbers, not the names.  Also, the number
      of antenna 1s must be the same as the number of antenna 2s.
    </description>
    <value></value>
  </param>

  <param type="stringArray" name="antenna2">
    <description>
      Antenna 2s.  NB: Use only the numbers, not the names.  Also, the number
      of antenna 2s must be the same as the number of antenna 1s.
    </description>
    <value></value>
  </param>

  <param type="double" name="starttime">
    <description>
      Start time.  NB: Use only the number (MJD seconds).
    </description>
  </param>

  <param type="double" name="stoptime">
    <description>
      Stop time.  NB: Use only the number (MJD seconds).
    </description>
  </param>

  <param type="stringArray" name="feed">
    <description>
      Feed IDs.
    </description>
    <value></value>
  </param>

  <param type="stringArray" name="spw">
    <description>
      SPW IDs.  NB: Use only the numbers, not the names.
    </description>
    <value></value>
  </param>

  <param type="intArray" name="startchan">
    <description>
      The start channels.  NB: The dimension of this array must be the same as
      the dimension of spw.
    </description>
  </param>

  <param type="intArray" name="stopchan">
    <description>
      The stop channels.  NB: The dimension of this array must be the same as
      the dimension of spw.
    </description>
  </param>

  <param type="string" name="axis">
    <description>
      The data/stats iteration axis (in addition to "FEED").  The allowed
      values are "FREQ" and "TIME".
    </description>
    <value></value>
  </param>

  <param type="string" name="ap">
    <description>
      If the data in the PARAM and PARAMERR columns are complex, convert them to
      either amplitude or phase.  If the data are float, this parameter is
      ignored.
    </description>
    <value></value>
  </param>

</input>

<returns type="any">
  <any type="record">
    <shortdescription>
      Dictionary that contains the selected data in the correct format.
    </shortdescription>
  </any>
</returns>

<example>
ca = calanalysis()
ca.open( '{caltable name}' )
data = ca.get( xxx )
ca.close()
del ca
</example>

</method>

<!-- *********************************************************************** -->

<method type="function" name="fit">


<shortdescription>
Fit calibration data.  NB: The final calibration selection code has not been
implemented yet, so desired input parameter lists and ranges must be entered
manually.
</shortdescription>

<description>
Fit calibration data.  NB: The final calibration selection code has not been
implemented yet, so desired input parameter lists and ranges must be entered
manually.
</description>

<input>

  <param type="stringArray" name="field">
    <description>
      Field IDs.  NB: Use only the numbers, not the names.
    </description>
    <value></value>
  </param>

  <param type="stringArray" name="antenna1">
    <description>
      Antenna 1s.  NB: Use only the numbers, not the names.  Also, the number
      of antenna 1s must be the same as the number of antenna 2s.
    </description>
    <value></value>
  </param>

  <param type="stringArray" name="antenna2">
    <description>
      Antenna 2s.  NB: Use only the numbers, not the names.  Also, the number
      of antenna 2s must be the same as the number of antenna 1s.
    </description>
    <value></value>
  </param>

  <param type="double" name="starttime">
    <description>
      Start time.  NB: Use only the number (MJD seconds).
    </description>
  </param>

  <param type="double" name="stoptime">
    <description>
      Stop time.  NB: Use only the number (MJD seconds).
    </description>
  </param>

  <param type="stringArray" name="feed">
    <description>
      Feed IDs.
    </description>
    <value></value>
  </param>

  <param type="stringArray" name="spw">
    <description>
      SPW IDs.  NB: Use only the numbers, not the names.
    </description>
    <value></value>
  </param>

  <param type="intArray" name="startchan">
    <description>
      The start channels.  NB: The dimension of this array must be the same as
      the dimension of spw.
    </description>
  </param>

  <param type="intArray" name="stopchan">
    <description>
      The stop channels.  NB: The dimension of this array must be the same as
      the dimension of spw.
    </description>
  </param>

  <param type="string" name="axis">
    <description>
      The data/stats iteration axis (in addition to "FEED").  The allowed
      values are "FREQ" and "TIME".
    </description>
    <value></value>
  </param>

  <param type="string" name="order">
    <description>
      The fit type.  The allowed values are "AVERAGE", "LINEAR", and
      "QUADRATIC".  NB: "QUADRATIC" is not allowed when type is "ROBUST".
    </description>
    <value></value>
  </param>

  <param type="string" name="type">
    <description>
      The fit order.  The allowed values are "LSQ" and "ROBUST".
    </description>
    <value></value>
  </param>

  <param type="bool" name="weight">
    <description>
      The weight flag.  The allowed values are True or False.
    </description>
  </param>

  <param type="string" name="ap">
    <description>
      If the data in the PARAM and PARAMERR columns are complex, convert them to
      either amplitude or phase.  If the data are float, this parameter is
      ignored.
    </description>
    <value></value>
  </param>

</input>

<returns type="any">
  <any type="record">
    <shortdescription>
      Dictionary that contains the selected data and fits in the correct format.
    </shortdescription>
  </any>
</returns>

<example>
ca = calanalysis()
ca.open( '{caltable name}' )
fit = ca.fit( xxx )
ca.close()
del ca
</example>

</method>
 
<!-- *********************************************************************** -->
<!-- *********************************************************************** -->

</tool>

</casaxml>

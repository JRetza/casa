<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


        <tool name="testflagger" module="testflagger">
<code>
	<include>xmlcasa/flagging/testflagger_forward.h</include>
<private>
	#include &lt;xmlcasa/flagging/testflagger_private.h&gt;
</private>
</code>

        <shortdescription>Refactored tool for manual and automated flagging</shortdescription>
       
<description>
The {\tt testflagger} tool performs manual as well as automatic synthesis
flagging operations within casapy. The {\tt testflagger} tool can operate on
one measurement set at a time.  
</description>

<!-- ********************************************************************** -->

   <method type="constructor" name="testflagger">
   <shortdescription>Construct a flag tool</shortdescription>
   
<description>
Create a {\tt testflagger} tool, and initializes some variables.
</description>
<input>

</input>
<returns type="unknown">testflagger tool</returns>
<example>

tfg:=testflagger()      

</example>
</method>

<!-- ********************************************************************** -->

   <method type="function" name="done">
   <shortdescription>Destroys the flag tool</shortdescription>
   
<description>

This function destroys the flag tool.

</description>
<returns type="void"/>
<example>
tfg.done()

</example>
</method>

<!-- ********************************************************************** -->

   <method type="function" name="configTestFlagger">
   <shortdescription>Parses some parameters to the FlagDataHandler for
   configuration. The parameters are the MS name, asyncIO and parallel.
</shortdescription>

<input>
   <param type="any" name="config">
         <any type="record"/>
   </param>
     <description>Parameters to configure the FlagDataHandler. The record should
     contain the MS name, asyncIO and parallel parameters.
     </description>
</input>

<example>
myrecord={}
myrecord['msname']='myfile.ms'
myrecord['asyncio']=True
myrecord['parallel']=False
tfg:=configTestFlagger(myrecord)
</example>
<returns type="bool"/> 
</method>

<!-- ********************************************************************** -->

   <method type="function" name="parseDataSelection">
   <shortdescription>Parses the union of all input data selections.
</shortdescription>
   
<description>If possible, a union of all input data selections will be done and
passed to the tool. Only the union of data will be selected from the MS to
avoid reading unnecessary data. See the example below.
</description>

<input>

     <param type="any" name="config">
         <any type="record"/>
     </param>
     <description>Parse the data selection parameters. The record may contain
     any data selection parameter supported by MSSelection such as:
     \n (1) array,feed,scan,field,spw,intent,correlation,antenna,uvrange
     \n (2) mode for flagging: manualflag,clip,quack,shadow,elevation,rfi,autoflag
     </description>
</input>
<example>
myrecord={}
myrecord['mode']='clip'
myrecord['scan']='1~3'
myrecord['clipminmax']=[0.02,0.3]
tfg:=parseDataSelection(myrecord)
</example>
<returns type="bool"/> 
</method>

<!-- ********************************************************************** -->

   <method type="function" name="parseAgentParameters">
   <shortdescription>Parses the parameters for the agent.
</shortdescription>
   
<description>The specific data selection parameters for the agent (flagging mode)
are parsed. These parameters are the data selection and mode-specific parameters.
See the example below:
</description>

<input>

     <param type="any" name="aparams">
         <any type="record"/>
     </param>
     <description>Parse the agent's data selection parameters. The record may contain
     any data selection parameter supported by MSSelection, as well as agent-specific
     parameters such as:
     \n (1) array,feed,scan,field,spw,intent,correlation,antenna,uvrange
     \n (2) mode for flagging: manualflag,clip,quack,shadow,elevation,rfi,autoflag
     </description>
</input>
<example>
myrecord={}
myrecord['mode']='clip'
myrecord['scan']='1~3'
myrecord['clipminmax']=[0.02,0.3]
tfg:=parseAgentParameters(myrecord)
</example>
<returns type="bool"/> 
</method>


<!-- ********************************************************************** -->

   <method type="function" name="init">
   <shortdescription>Initialize the FlagDataHandler and FlagAgentBase.</shortdescription>
   
<description>This method will initialize the FlagDataHandler by opening the MS
and selecting the data according to what was parsed previously by parseDataSelection.
</description>

<input>
</input>
<returns type="bool"/> 
</method>

<!-- ********************************************************************** -->

   <method type="function" name="run">
   <shortdescription>Executes a flagging run</shortdescription>
   
<description>
Executes a flagging run.
</description>
<input>
</input>
<returns type="record"/>
<example>
</example>
</method>


--> 
<!-- ********************************************************************** -->
 
</tool>
</casaxml>




#!/usr/bin/perl
use File::Basename;
use File::Find;
use Cwd 'abs_path';
use Cwd 'getcwd';
use File::Path qw(make_path remove_tree);

$origin = getcwd( );
$binpath = abs_path(dirname(abs_path($0)));
$wget = "$binpath/wget_plone.sh";
$installpath = abs_path("$binpath/../..");
$tmpdir = "$installpath/tmp";
$outputdir = "$installpath/docs/plone";
$outputdir_default = "$outputdir";
$debug = 0;
$logging = 0;
$LOG = STDOUT;

$url = "https://casa.nrao.edu/plonedocs/stable";
$result = "casa.nrao.edu";

die "plone support script ($wget) does not exist" unless -f $wget;
die "cannot execute plone support script" unless -x $wget;

foreach ( @ARGV ) {
    if ( m|^tmp=(.*)$| ) {
        my $dir = $1;
        die "tmp directory ($dir) does not exist..." unless -d $dir;
        $tmpdir = $dir;
    } elsif ( m|^url=(.*)$| ) {
        ### we'll just have to assume the user knows what they're asking for...
        $url=$1;
    } elsif ( m|^out=(.*)$| ) {
        my $dir = $1;
        die "output directory ($dir) does not exits..." unless -d $dir;
        $outputdir = $dir;
    } elsif ( m|^-?-debug$| ) {
        $debug = 1;
    } elsif ( m|^-?-usage$| || m|help|i ) {
        usage( );
        exit(0);
    } elsif ( m|^log=(.*)$| ) {
        my $path = $1;
        my $dir = dirname($path);
        die "directory of log file ($path) does not exit..." unless -d $dir;
        open($LOG,"> $path") or die "cannot write to log file ($path): $!";
        $logging = 1;
    } else {
        usage( );
        die "unknown option \"$_\"...";
    }
}

unless ( -d $tmpdir ) {
    make_path($tmpdir) or die "could not create temporary directory ($tmpdir)";
}
# remove old output directory... plus minimal sanity check...
# assume that the user has provided a clean directory (if that's what they want)...
if ( $outputdir eq $outputdir_default && $outputdir ne "/" && -d $outputdir ) { remove_tree($outputdir) }
# create output directory if it exists...
unless ( -d $outputdir ) {
    make_path($outputdir) or die "could not create output directory ($outputdir)";
}

$workdir = "$tmpdir/plone.$$";
die "cannot create work directory ($workdir)" unless make_path($workdir);

chdir($workdir);
print $LOG "running in $workdir...\n";
open( WGET, "yes n | $wget $url 2>&1 |" );
while ( <WGET> ) {
    print $LOG "    wget> $_";
}
close(WGET);
die "failed to fetch $url" unless -d $result;

open( TAR, "tar -cf - $result | tar -C $outputdir -xf - |" );
while ( <TAR> ) {
    print $LOG "    copy> $_";
}
close(TAR);

chdir($origin);
remove_tree($workdir);

sub usage {
    print <<'END-OF-USAGE';
This script will generate doxygen documentation in "docs/doxygen". The options are:

    -usage         Print this information...
    -debug         Print verbose information...

    url=<URL>      URL that should be fetched

    tmp=<DIR>      Directory to use for storing intermediate file and
                   running doxygen.
    out=<DIR>      Directory where the output should be created. This
                   directory should exist, and if you want a clean
                   run, it should be empty.
    log=<FILE>     Use <FILE> for all output instead of stdout
                   (implies '-debug').

END-OF-USAGE
}
